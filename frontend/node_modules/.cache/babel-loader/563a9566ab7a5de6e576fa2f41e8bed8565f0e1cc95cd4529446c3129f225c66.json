{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isInSubnet = isInSubnet;\nexports.isCorrect = isCorrect;\nexports.numberToPaddedHex = numberToPaddedHex;\nexports.stringToPaddedHex = stringToPaddedHex;\nexports.testBit = testBit;\nfunction isInSubnet(address) {\n  if (this.subnetMask < address.subnetMask) {\n    return false;\n  }\n  if (this.mask(address.subnetMask) === address.mask()) {\n    return true;\n  }\n  return false;\n}\nfunction isCorrect(defaultBits) {\n  return function () {\n    if (this.addressMinusSuffix !== this.correctForm()) {\n      return false;\n    }\n    if (this.subnetMask === defaultBits && !this.parsedSubnet) {\n      return true;\n    }\n    return this.parsedSubnet === String(this.subnetMask);\n  };\n}\nfunction numberToPaddedHex(number) {\n  return number.toString(16).padStart(2, '0');\n}\nfunction stringToPaddedHex(numberString) {\n  return numberToPaddedHex(parseInt(numberString, 10));\n}\n/**\n * @param binaryValue Binary representation of a value (e.g. `10`)\n * @param position Byte position, where 0 is the least significant bit\n */\nfunction testBit(binaryValue, position) {\n  const {\n    length\n  } = binaryValue;\n  if (position > length) {\n    return false;\n  }\n  const positionInString = length - position;\n  return binaryValue.substring(positionInString, positionInString + 1) === '1';\n}","map":{"version":3,"names":["exports","isInSubnet","isCorrect","numberToPaddedHex","stringToPaddedHex","testBit","address","subnetMask","mask","defaultBits","addressMinusSuffix","correctForm","parsedSubnet","String","number","toString","padStart","numberString","parseInt","binaryValue","position","length","positionInString","substring"],"sources":["/Users/goyac1/Desktop/Projects/puppeteer/node_modules/ip-address/src/common.ts"],"sourcesContent":["import { Address4 } from './ipv4';\nimport { Address6 } from './ipv6';\n\nexport interface ReverseFormOptions {\n  omitSuffix?: boolean;\n}\n\nexport function isInSubnet(this: Address4 | Address6, address: Address4 | Address6) {\n  if (this.subnetMask < address.subnetMask) {\n    return false;\n  }\n\n  if (this.mask(address.subnetMask) === address.mask()) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function isCorrect(defaultBits: number) {\n  return function (this: Address4 | Address6) {\n    if (this.addressMinusSuffix !== this.correctForm()) {\n      return false;\n    }\n\n    if (this.subnetMask === defaultBits && !this.parsedSubnet) {\n      return true;\n    }\n\n    return this.parsedSubnet === String(this.subnetMask);\n  };\n}\n\nexport function numberToPaddedHex(number: number) {\n  return number.toString(16).padStart(2, '0');\n}\n\nexport function stringToPaddedHex(numberString: string) {\n  return numberToPaddedHex(parseInt(numberString, 10));\n}\n\n/**\n * @param binaryValue Binary representation of a value (e.g. `10`)\n * @param position Byte position, where 0 is the least significant bit\n */\nexport function testBit(binaryValue: string, position: number): boolean {\n  const { length } = binaryValue;\n\n  if (position > length) {\n    return false;\n  }\n\n  const positionInString = length - position;\n  return binaryValue.substring(positionInString, positionInString + 1) === '1';\n}\n"],"mappings":";;;;;AAOAA,OAAA,CAAAC,UAAA,GAAAA,UAAA;AAYAD,OAAA,CAAAE,SAAA,GAAAA,SAAA;AAcAF,OAAA,CAAAG,iBAAA,GAAAA,iBAAA;AAIAH,OAAA,CAAAI,iBAAA,GAAAA,iBAAA;AAQAJ,OAAA,CAAAK,OAAA,GAAAA,OAAA;AAtCA,SAAgBJ,UAAUA,CAA4BK,OAA4B;EAChF,IAAI,IAAI,CAACC,UAAU,GAAGD,OAAO,CAACC,UAAU,EAAE;IACxC,OAAO,KAAK;EACd;EAEA,IAAI,IAAI,CAACC,IAAI,CAACF,OAAO,CAACC,UAAU,CAAC,KAAKD,OAAO,CAACE,IAAI,EAAE,EAAE;IACpD,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd;AAEA,SAAgBN,SAASA,CAACO,WAAmB;EAC3C,OAAO;IACL,IAAI,IAAI,CAACC,kBAAkB,KAAK,IAAI,CAACC,WAAW,EAAE,EAAE;MAClD,OAAO,KAAK;IACd;IAEA,IAAI,IAAI,CAACJ,UAAU,KAAKE,WAAW,IAAI,CAAC,IAAI,CAACG,YAAY,EAAE;MACzD,OAAO,IAAI;IACb;IAEA,OAAO,IAAI,CAACA,YAAY,KAAKC,MAAM,CAAC,IAAI,CAACN,UAAU,CAAC;EACtD,CAAC;AACH;AAEA,SAAgBJ,iBAAiBA,CAACW,MAAc;EAC9C,OAAOA,MAAM,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;AAC7C;AAEA,SAAgBZ,iBAAiBA,CAACa,YAAoB;EACpD,OAAOd,iBAAiB,CAACe,QAAQ,CAACD,YAAY,EAAE,EAAE,CAAC,CAAC;AACtD;AAEA;;;;AAIA,SAAgBZ,OAAOA,CAACc,WAAmB,EAAEC,QAAgB;EAC3D,MAAM;IAAEC;EAAM,CAAE,GAAGF,WAAW;EAE9B,IAAIC,QAAQ,GAAGC,MAAM,EAAE;IACrB,OAAO,KAAK;EACd;EAEA,MAAMC,gBAAgB,GAAGD,MAAM,GAAGD,QAAQ;EAC1C,OAAOD,WAAW,CAACI,SAAS,CAACD,gBAAgB,EAAEA,gBAAgB,GAAG,CAAC,CAAC,KAAK,GAAG;AAC9E","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}