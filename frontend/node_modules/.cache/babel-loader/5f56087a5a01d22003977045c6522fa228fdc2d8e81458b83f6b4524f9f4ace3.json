{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.spanAllZeroes = spanAllZeroes;\nexports.spanAll = spanAll;\nexports.spanLeadingZeroes = spanLeadingZeroes;\nexports.simpleGroup = simpleGroup;\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\nfunction spanAllZeroes(s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with each character contained in a <span>\n */\nfunction spanAll(s, offset = 0) {\n  const letters = s.split('');\n  return letters.map((n, i) => `<span class=\"digit value-${n} position-${i + offset}\">${spanAllZeroes(n)}</span>`).join('');\n}\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\nfunction spanLeadingZeroes(address) {\n  const groups = address.split(':');\n  return groups.map(g => spanLeadingZeroesSimple(g)).join(':');\n}\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\nfunction simpleGroup(addressString, offset = 0) {\n  const groups = addressString.split(':');\n  return groups.map((g, i) => {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n    return `<span class=\"hover-group group-${i + offset}\">${spanLeadingZeroesSimple(g)}</span>`;\n  });\n}","map":{"version":3,"names":["exports","spanAllZeroes","spanAll","spanLeadingZeroes","simpleGroup","s","replace","offset","letters","split","map","n","i","join","spanLeadingZeroesSimple","group","address","groups","g","addressString","test"],"sources":["/Users/goyac1/Desktop/Projects/puppeteer/node_modules/ip-address/src/v6/helpers.ts"],"sourcesContent":["/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\nexport function spanAllZeroes(s: string): string {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n}\n\n/**\n * @returns {String} the string with each character contained in a <span>\n */\nexport function spanAll(s: string, offset: number = 0): string {\n  const letters = s.split('');\n\n  return letters\n    .map(\n      (n, i) => `<span class=\"digit value-${n} position-${i + offset}\">${spanAllZeroes(n)}</span>`,\n    )\n    .join('');\n}\n\nfunction spanLeadingZeroesSimple(group: string): string {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\nexport function spanLeadingZeroes(address: string): string {\n  const groups = address.split(':');\n\n  return groups.map((g) => spanLeadingZeroesSimple(g)).join(':');\n}\n\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\nexport function simpleGroup(addressString: string, offset: number = 0): string[] {\n  const groups = addressString.split(':');\n\n  return groups.map((g, i) => {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n\n    return `<span class=\"hover-group group-${i + offset}\">${spanLeadingZeroesSimple(g)}</span>`;\n  });\n}\n"],"mappings":";;;;;AAGAA,OAAA,CAAAC,aAAA,GAAAA,aAAA;AAOAD,OAAA,CAAAE,OAAA,GAAAA,OAAA;AAiBAF,OAAA,CAAAG,iBAAA,GAAAA,iBAAA;AAUAH,OAAA,CAAAI,WAAA,GAAAA,WAAA;AArCA;;;AAGA,SAAgBH,aAAaA,CAACI,CAAS;EACrC,OAAOA,CAAC,CAACC,OAAO,CAAC,OAAO,EAAE,8BAA8B,CAAC;AAC3D;AAEA;;;AAGA,SAAgBJ,OAAOA,CAACG,CAAS,EAAEE,MAAA,GAAiB,CAAC;EACnD,MAAMC,OAAO,GAAGH,CAAC,CAACI,KAAK,CAAC,EAAE,CAAC;EAE3B,OAAOD,OAAO,CACXE,GAAG,CACF,CAACC,CAAC,EAAEC,CAAC,KAAK,4BAA4BD,CAAC,aAAaC,CAAC,GAAGL,MAAM,KAAKN,aAAa,CAACU,CAAC,CAAC,SAAS,CAC7F,CACAE,IAAI,CAAC,EAAE,CAAC;AACb;AAEA,SAASC,uBAAuBA,CAACC,KAAa;EAC5C,OAAOA,KAAK,CAACT,OAAO,CAAC,OAAO,EAAE,8BAA8B,CAAC;AAC/D;AAEA;;;AAGA,SAAgBH,iBAAiBA,CAACa,OAAe;EAC/C,MAAMC,MAAM,GAAGD,OAAO,CAACP,KAAK,CAAC,GAAG,CAAC;EAEjC,OAAOQ,MAAM,CAACP,GAAG,CAAEQ,CAAC,IAAKJ,uBAAuB,CAACI,CAAC,CAAC,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC;AAChE;AAEA;;;;AAIA,SAAgBT,WAAWA,CAACe,aAAqB,EAAEZ,MAAA,GAAiB,CAAC;EACnE,MAAMU,MAAM,GAAGE,aAAa,CAACV,KAAK,CAAC,GAAG,CAAC;EAEvC,OAAOQ,MAAM,CAACP,GAAG,CAAC,CAACQ,CAAC,EAAEN,CAAC,KAAI;IACzB,IAAI,UAAU,CAACQ,IAAI,CAACF,CAAC,CAAC,EAAE;MACtB,OAAOA,CAAC;IACV;IAEA,OAAO,kCAAkCN,CAAC,GAAGL,MAAM,KAAKO,uBAAuB,CAACI,CAAC,CAAC,SAAS;EAC7F,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}