{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { stdin as input, stdout as output } from 'node:process';\nimport * as readline from 'node:readline';\nimport { resolveBuildId, BrowserPlatform } from './browser-data/browser-data.js';\nimport { Cache } from './Cache.js';\nimport { detectBrowserPlatform } from './detectPlatform.js';\nimport { packageVersion } from './generated/version.js';\nimport { install } from './install.js';\nimport { computeExecutablePath, computeSystemExecutablePath, launch } from './launch.js';\n/**\n * @public\n */\nexport class CLI {\n  #cachePath;\n  #rl;\n  #scriptName;\n  #version;\n  #allowCachePathOverride;\n  #pinnedBrowsers;\n  #prefixCommand;\n  constructor(opts, rl) {\n    if (!opts) {\n      opts = {};\n    }\n    if (typeof opts === 'string') {\n      opts = {\n        cachePath: opts\n      };\n    }\n    this.#cachePath = opts.cachePath ?? process.cwd();\n    this.#rl = rl;\n    this.#scriptName = opts.scriptName ?? '@puppeteer/browsers';\n    this.#version = opts.version ?? packageVersion;\n    this.#allowCachePathOverride = opts.allowCachePathOverride ?? true;\n    this.#pinnedBrowsers = opts.pinnedBrowsers;\n    this.#prefixCommand = opts.prefixCommand;\n  }\n  #defineBrowserParameter(yargs, required) {\n    return yargs.positional('browser', {\n      description: 'Which browser to install <browser>[@<buildId|latest>]. `latest` will try to find the latest available build. `buildId` is a browser-specific identifier such as a version or a revision.',\n      type: 'string',\n      coerce: opt => {\n        return {\n          name: this.#parseBrowser(opt),\n          buildId: this.#parseBuildId(opt)\n        };\n      },\n      demandOption: required\n    });\n  }\n  #definePlatformParameter(yargs) {\n    return yargs.option('platform', {\n      type: 'string',\n      desc: 'Platform that the binary needs to be compatible with.',\n      choices: Object.values(BrowserPlatform),\n      defaultDescription: 'Auto-detected'\n    });\n  }\n  #definePathParameter(yargs, required = false) {\n    if (!this.#allowCachePathOverride) {\n      return yargs;\n    }\n    return yargs.option('path', {\n      type: 'string',\n      desc: 'Path to the root folder for the browser downloads and installation. If a relative path is provided, it will be resolved relative to the current working directory. The installation folder structure is compatible with the cache structure used by Puppeteer.',\n      defaultDescription: 'Current working directory',\n      ...(required ? {} : {\n        default: process.cwd()\n      }),\n      demandOption: required\n    });\n  }\n  async run(argv) {\n    const {\n      default: yargs\n    } = await import('yargs');\n    const {\n      hideBin\n    } = await import('yargs/helpers');\n    const yargsInstance = yargs(hideBin(argv));\n    let target = yargsInstance.scriptName(this.#scriptName).version(this.#version);\n    if (this.#prefixCommand) {\n      target = target.command(this.#prefixCommand.cmd, this.#prefixCommand.description, yargs => {\n        return this.#build(yargs);\n      });\n    } else {\n      target = this.#build(target);\n    }\n    await target.demandCommand(1).help().wrap(Math.min(120, yargsInstance.terminalWidth())).parseAsync();\n  }\n  #build(yargs) {\n    const latestOrPinned = this.#pinnedBrowsers ? 'pinned' : 'latest';\n    // If there are pinned browsers allow the positional arg to be optional\n    const browserArgType = this.#pinnedBrowsers ? '[browser]' : '<browser>';\n    return yargs.command(`install ${browserArgType}`, 'Download and install the specified browser. If successful, the command outputs the actual browser buildId that was installed and the absolute path to the browser executable (format: <browser>@<buildID> <path>).', yargs => {\n      if (this.#pinnedBrowsers) {\n        yargs.example('$0 install', 'Install all pinned browsers');\n      }\n      yargs.example('$0 install chrome', `Install the ${latestOrPinned} available build of the Chrome browser.`).example('$0 install chrome@latest', 'Install the latest available build for the Chrome browser.').example('$0 install chrome@stable', 'Install the latest available build for the Chrome browser from the stable channel.').example('$0 install chrome@beta', 'Install the latest available build for the Chrome browser from the beta channel.').example('$0 install chrome@dev', 'Install the latest available build for the Chrome browser from the dev channel.').example('$0 install chrome@canary', 'Install the latest available build for the Chrome Canary browser.').example('$0 install chrome@115', 'Install the latest available build for Chrome 115.').example('$0 install chromedriver@canary', 'Install the latest available build for ChromeDriver Canary.').example('$0 install chromedriver@115', 'Install the latest available build for ChromeDriver 115.').example('$0 install chromedriver@115.0.5790', 'Install the latest available patch (115.0.5790.X) build for ChromeDriver.').example('$0 install chrome-headless-shell', 'Install the latest available chrome-headless-shell build.').example('$0 install chrome-headless-shell@beta', 'Install the latest available chrome-headless-shell build corresponding to the Beta channel.').example('$0 install chrome-headless-shell@118', 'Install the latest available chrome-headless-shell 118 build.').example('$0 install chromium@1083080', 'Install the revision 1083080 of the Chromium browser.').example('$0 install firefox', 'Install the latest nightly available build of the Firefox browser.').example('$0 install firefox@stable', 'Install the latest stable build of the Firefox browser.').example('$0 install firefox@beta', 'Install the latest beta build of the Firefox browser.').example('$0 install firefox@devedition', 'Install the latest devedition build of the Firefox browser.').example('$0 install firefox@esr', 'Install the latest ESR build of the Firefox browser.').example('$0 install firefox@nightly', 'Install the latest nightly build of the Firefox browser.').example('$0 install firefox@stable_111.0.1', 'Install a specific version of the Firefox browser.').example('$0 install firefox --platform mac', 'Install the latest Mac (Intel) build of the Firefox browser.');\n      if (this.#allowCachePathOverride) {\n        yargs.example('$0 install firefox --path /tmp/my-browser-cache', 'Install to the specified cache directory.');\n      }\n      const yargsWithBrowserParam = this.#defineBrowserParameter(yargs, !Boolean(this.#pinnedBrowsers));\n      const yargsWithPlatformParam = this.#definePlatformParameter(yargsWithBrowserParam);\n      return this.#definePathParameter(yargsWithPlatformParam, false).option('base-url', {\n        type: 'string',\n        desc: 'Base URL to download from'\n      }).option('install-deps', {\n        type: 'boolean',\n        desc: 'Whether to attempt installing system dependencies (only supported on Linux, requires root privileges).',\n        default: false\n      });\n    }, async args => {\n      if (this.#pinnedBrowsers && !args.browser) {\n        // Use allSettled to avoid scenarios that\n        // a browser may fail early and leave the other\n        // installation in a faulty state\n        const result = await Promise.allSettled(Object.entries(this.#pinnedBrowsers).map(async ([browser, options]) => {\n          if (options.skipDownload) {\n            return;\n          }\n          await this.#install({\n            ...args,\n            browser: {\n              name: browser,\n              buildId: options.buildId\n            }\n          });\n        }));\n        for (const install of result) {\n          if (install.status === 'rejected') {\n            throw install.reason;\n          }\n        }\n      } else {\n        await this.#install(args);\n      }\n    }).command('launch <browser>', 'Launch the specified browser', yargs => {\n      yargs.example('$0 launch chrome@115.0.5790.170', 'Launch Chrome 115.0.5790.170').example('$0 launch firefox@112.0a1', 'Launch the Firefox browser identified by the milestone 112.0a1.').example('$0 launch chrome@115.0.5790.170 --detached', 'Launch the browser but detach the sub-processes.').example('$0 launch chrome@canary --system', 'Try to locate the Canary build of Chrome installed on the system and launch it.').example('$0 launch chrome@115.0.5790.170 -- --version', 'Launch Chrome 115.0.5790.170 and pass custom argument to the binary.');\n      const yargsWithExtraAgs = yargs.parserConfiguration({\n        'populate--': true\n        // Yargs does not have the correct overload for this.\n      });\n      const yargsWithBrowserParam = this.#defineBrowserParameter(yargsWithExtraAgs, true);\n      const yargsWithPlatformParam = this.#definePlatformParameter(yargsWithBrowserParam);\n      return this.#definePathParameter(yargsWithPlatformParam).option('detached', {\n        type: 'boolean',\n        desc: 'Detach the child process.',\n        default: false\n      }).option('system', {\n        type: 'boolean',\n        desc: 'Search for a browser installed on the system instead of the cache folder.',\n        default: false\n      }).option('dumpio', {\n        type: 'boolean',\n        desc: \"Forwards the browser's process stdout and stderr\",\n        default: false\n      });\n    }, async args => {\n      const extraArgs = args['--']?.filter(arg => {\n        return typeof arg === 'string';\n      });\n      const executablePath = args.system ? computeSystemExecutablePath({\n        browser: args.browser.name,\n        // TODO: throw an error if not a ChromeReleaseChannel is provided.\n        channel: args.browser.buildId,\n        platform: args.platform\n      }) : computeExecutablePath({\n        browser: args.browser.name,\n        buildId: args.browser.buildId,\n        cacheDir: args.path ?? this.#cachePath,\n        platform: args.platform\n      });\n      launch({\n        args: extraArgs,\n        executablePath,\n        dumpio: args.dumpio,\n        detached: args.detached\n      });\n    }).command('clear', this.#allowCachePathOverride ? 'Removes all installed browsers from the specified cache directory' : `Removes all installed browsers from ${this.#cachePath}`, yargs => {\n      return this.#definePathParameter(yargs, true);\n    }, async args => {\n      const cacheDir = args.path ?? this.#cachePath;\n      const rl = this.#rl ?? readline.createInterface({\n        input,\n        output\n      });\n      rl.question(`Do you want to permanently and recursively delete the content of ${cacheDir} (yes/No)? `, answer => {\n        rl.close();\n        if (!['y', 'yes'].includes(answer.toLowerCase().trim())) {\n          console.log('Cancelled.');\n          return;\n        }\n        const cache = new Cache(cacheDir);\n        cache.clear();\n        console.log(`${cacheDir} cleared.`);\n      });\n    }).command('list', 'List all installed browsers in the cache directory', yargs => {\n      yargs.example('$0 list', 'List all installed browsers in the cache directory');\n      if (this.#allowCachePathOverride) {\n        yargs.example('$0 list --path /tmp/my-browser-cache', 'List browsers installed in the specified cache directory');\n      }\n      return this.#definePathParameter(yargs);\n    }, async args => {\n      const cacheDir = args.path ?? this.#cachePath;\n      const cache = new Cache(cacheDir);\n      const browsers = cache.getInstalledBrowsers();\n      for (const browser of browsers) {\n        console.log(`${browser.browser}@${browser.buildId} (${browser.platform}) ${browser.executablePath}`);\n      }\n    }).demandCommand(1).help();\n  }\n  #parseBrowser(version) {\n    return version.split('@').shift();\n  }\n  #parseBuildId(version) {\n    const parts = version.split('@');\n    return parts.length === 2 ? parts[1] : this.#pinnedBrowsers ? 'pinned' : 'latest';\n  }\n  async #install(args) {\n    args.platform ??= detectBrowserPlatform();\n    if (!args.browser) {\n      throw new Error(`No browser arg provided`);\n    }\n    if (!args.platform) {\n      throw new Error(`Could not resolve the current platform`);\n    }\n    if (args.browser.buildId === 'pinned') {\n      const options = this.#pinnedBrowsers?.[args.browser.name];\n      if (!options || !options.buildId) {\n        throw new Error(`No pinned version found for ${args.browser.name}`);\n      }\n      args.browser.buildId = options.buildId;\n    }\n    const originalBuildId = args.browser.buildId;\n    args.browser.buildId = await resolveBuildId(args.browser.name, args.platform, args.browser.buildId);\n    await install({\n      browser: args.browser.name,\n      buildId: args.browser.buildId,\n      platform: args.platform,\n      cacheDir: args.path ?? this.#cachePath,\n      downloadProgressCallback: 'default',\n      baseUrl: args.baseUrl,\n      buildIdAlias: originalBuildId !== args.browser.buildId ? originalBuildId : undefined,\n      installDeps: args.installDeps\n    });\n    console.log(`${args.browser.name}@${args.browser.buildId} ${computeExecutablePath({\n      browser: args.browser.name,\n      buildId: args.browser.buildId,\n      cacheDir: args.path ?? this.#cachePath,\n      platform: args.platform\n    })}`);\n  }\n}","map":{"version":3,"names":["stdin","input","stdout","output","readline","resolveBuildId","BrowserPlatform","Cache","detectBrowserPlatform","packageVersion","install","computeExecutablePath","computeSystemExecutablePath","launch","CLI","cachePath","rl","scriptName","version","allowCachePathOverride","pinnedBrowsers","prefixCommand","constructor","opts","process","cwd","defineBrowserParameter","#defineBrowserParameter","yargs","required","positional","description","type","coerce","opt","name","parseBrowser","buildId","parseBuildId","demandOption","definePlatformParameter","#definePlatformParameter","option","desc","choices","Object","values","defaultDescription","definePathParameter","#definePathParameter","default","run","argv","hideBin","yargsInstance","target","command","cmd","build","demandCommand","help","wrap","Math","min","terminalWidth","parseAsync","#build","latestOrPinned","browserArgType","example","yargsWithBrowserParam","Boolean","yargsWithPlatformParam","args","browser","result","Promise","allSettled","entries","map","options","skipDownload","status","reason","yargsWithExtraAgs","parserConfiguration","extraArgs","filter","arg","executablePath","system","channel","platform","cacheDir","path","dumpio","detached","createInterface","question","answer","close","includes","toLowerCase","trim","console","log","cache","clear","browsers","getInstalledBrowsers","#parseBrowser","split","shift","#parseBuildId","parts","length","#install","Error","originalBuildId","downloadProgressCallback","baseUrl","buildIdAlias","undefined","installDeps"],"sources":["/Users/goyac1/Desktop/Projects/puppeteer/node_modules/@puppeteer/browsers/src/CLI.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {stdin as input, stdout as output} from 'node:process';\nimport * as readline from 'node:readline';\n\nimport type * as Yargs from 'yargs';\n\nimport {\n  resolveBuildId,\n  type Browser,\n  BrowserPlatform,\n  type ChromeReleaseChannel,\n} from './browser-data/browser-data.js';\nimport {Cache} from './Cache.js';\nimport {detectBrowserPlatform} from './detectPlatform.js';\nimport {packageVersion} from './generated/version.js';\nimport {install} from './install.js';\nimport {\n  computeExecutablePath,\n  computeSystemExecutablePath,\n  launch,\n} from './launch.js';\n\ninterface InstallBrowser {\n  name: Browser;\n  buildId: string;\n}\ninterface InstallArgs {\n  browser?: InstallBrowser;\n  path?: string;\n  platform?: BrowserPlatform;\n  baseUrl?: string;\n  installDeps?: boolean;\n}\n\n/**\n * @public\n */\nexport class CLI {\n  #cachePath: string;\n  #rl?: readline.Interface;\n  #scriptName: string;\n  #version: string;\n  #allowCachePathOverride: boolean;\n  #pinnedBrowsers?: Partial<\n    Record<\n      Browser,\n      {\n        buildId: string;\n        skipDownload: boolean;\n      }\n    >\n  >;\n  #prefixCommand?: {cmd: string; description: string};\n\n  constructor(\n    opts?:\n      | string\n      | {\n          cachePath?: string;\n          scriptName?: string;\n          version?: string;\n          prefixCommand?: {cmd: string; description: string};\n          allowCachePathOverride?: boolean;\n          pinnedBrowsers?: Partial<\n            Record<\n              Browser,\n              {\n                buildId: string;\n                skipDownload: boolean;\n              }\n            >\n          >;\n        },\n    rl?: readline.Interface,\n  ) {\n    if (!opts) {\n      opts = {};\n    }\n    if (typeof opts === 'string') {\n      opts = {\n        cachePath: opts,\n      };\n    }\n    this.#cachePath = opts.cachePath ?? process.cwd();\n    this.#rl = rl;\n    this.#scriptName = opts.scriptName ?? '@puppeteer/browsers';\n    this.#version = opts.version ?? packageVersion;\n    this.#allowCachePathOverride = opts.allowCachePathOverride ?? true;\n    this.#pinnedBrowsers = opts.pinnedBrowsers;\n    this.#prefixCommand = opts.prefixCommand;\n  }\n\n  #defineBrowserParameter<T>(\n    yargs: Yargs.Argv<T>,\n    required: true,\n  ): Yargs.Argv<T & {browser: InstallBrowser}>;\n  #defineBrowserParameter<T>(\n    yargs: Yargs.Argv<T>,\n    required: boolean,\n  ): Yargs.Argv<T & {browser: InstallBrowser | undefined}>;\n  #defineBrowserParameter<T>(yargs: Yargs.Argv<T>, required: boolean) {\n    return yargs.positional('browser', {\n      description:\n        'Which browser to install <browser>[@<buildId|latest>]. `latest` will try to find the latest available build. `buildId` is a browser-specific identifier such as a version or a revision.',\n      type: 'string',\n      coerce: (opt): InstallBrowser => {\n        return {\n          name: this.#parseBrowser(opt),\n          buildId: this.#parseBuildId(opt),\n        };\n      },\n      demandOption: required,\n    });\n  }\n\n  #definePlatformParameter<T>(yargs: Yargs.Argv<T>) {\n    return yargs.option('platform', {\n      type: 'string',\n      desc: 'Platform that the binary needs to be compatible with.',\n      choices: Object.values(BrowserPlatform),\n      defaultDescription: 'Auto-detected',\n    });\n  }\n\n  #definePathParameter<T>(yargs: Yargs.Argv<T>, required = false) {\n    if (!this.#allowCachePathOverride) {\n      return yargs as Yargs.Argv<T & {path: undefined}>;\n    }\n\n    return yargs.option('path', {\n      type: 'string',\n      desc: 'Path to the root folder for the browser downloads and installation. If a relative path is provided, it will be resolved relative to the current working directory. The installation folder structure is compatible with the cache structure used by Puppeteer.',\n      defaultDescription: 'Current working directory',\n      ...(required ? {} : {default: process.cwd()}),\n      demandOption: required,\n    });\n  }\n\n  async run(argv: string[]): Promise<void> {\n    const {default: yargs} = await import('yargs');\n    const {hideBin} = await import('yargs/helpers');\n    const yargsInstance = yargs(hideBin(argv));\n    let target = yargsInstance\n      .scriptName(this.#scriptName)\n      .version(this.#version);\n    if (this.#prefixCommand) {\n      target = target.command(\n        this.#prefixCommand.cmd,\n        this.#prefixCommand.description,\n        yargs => {\n          return this.#build(yargs);\n        },\n      );\n    } else {\n      target = this.#build(target);\n    }\n    await target\n      .demandCommand(1)\n      .help()\n      .wrap(Math.min(120, yargsInstance.terminalWidth()))\n      .parseAsync();\n  }\n\n  #build(yargs: Yargs.Argv<unknown>) {\n    const latestOrPinned = this.#pinnedBrowsers ? 'pinned' : 'latest';\n    // If there are pinned browsers allow the positional arg to be optional\n    const browserArgType = this.#pinnedBrowsers ? '[browser]' : '<browser>';\n    return yargs\n      .command(\n        `install ${browserArgType}`,\n        'Download and install the specified browser. If successful, the command outputs the actual browser buildId that was installed and the absolute path to the browser executable (format: <browser>@<buildID> <path>).',\n        yargs => {\n          if (this.#pinnedBrowsers) {\n            yargs.example('$0 install', 'Install all pinned browsers');\n          }\n          yargs\n            .example(\n              '$0 install chrome',\n              `Install the ${latestOrPinned} available build of the Chrome browser.`,\n            )\n            .example(\n              '$0 install chrome@latest',\n              'Install the latest available build for the Chrome browser.',\n            )\n            .example(\n              '$0 install chrome@stable',\n              'Install the latest available build for the Chrome browser from the stable channel.',\n            )\n            .example(\n              '$0 install chrome@beta',\n              'Install the latest available build for the Chrome browser from the beta channel.',\n            )\n            .example(\n              '$0 install chrome@dev',\n              'Install the latest available build for the Chrome browser from the dev channel.',\n            )\n            .example(\n              '$0 install chrome@canary',\n              'Install the latest available build for the Chrome Canary browser.',\n            )\n            .example(\n              '$0 install chrome@115',\n              'Install the latest available build for Chrome 115.',\n            )\n            .example(\n              '$0 install chromedriver@canary',\n              'Install the latest available build for ChromeDriver Canary.',\n            )\n            .example(\n              '$0 install chromedriver@115',\n              'Install the latest available build for ChromeDriver 115.',\n            )\n            .example(\n              '$0 install chromedriver@115.0.5790',\n              'Install the latest available patch (115.0.5790.X) build for ChromeDriver.',\n            )\n            .example(\n              '$0 install chrome-headless-shell',\n              'Install the latest available chrome-headless-shell build.',\n            )\n            .example(\n              '$0 install chrome-headless-shell@beta',\n              'Install the latest available chrome-headless-shell build corresponding to the Beta channel.',\n            )\n            .example(\n              '$0 install chrome-headless-shell@118',\n              'Install the latest available chrome-headless-shell 118 build.',\n            )\n            .example(\n              '$0 install chromium@1083080',\n              'Install the revision 1083080 of the Chromium browser.',\n            )\n            .example(\n              '$0 install firefox',\n              'Install the latest nightly available build of the Firefox browser.',\n            )\n            .example(\n              '$0 install firefox@stable',\n              'Install the latest stable build of the Firefox browser.',\n            )\n            .example(\n              '$0 install firefox@beta',\n              'Install the latest beta build of the Firefox browser.',\n            )\n            .example(\n              '$0 install firefox@devedition',\n              'Install the latest devedition build of the Firefox browser.',\n            )\n            .example(\n              '$0 install firefox@esr',\n              'Install the latest ESR build of the Firefox browser.',\n            )\n            .example(\n              '$0 install firefox@nightly',\n              'Install the latest nightly build of the Firefox browser.',\n            )\n            .example(\n              '$0 install firefox@stable_111.0.1',\n              'Install a specific version of the Firefox browser.',\n            )\n            .example(\n              '$0 install firefox --platform mac',\n              'Install the latest Mac (Intel) build of the Firefox browser.',\n            );\n          if (this.#allowCachePathOverride) {\n            yargs.example(\n              '$0 install firefox --path /tmp/my-browser-cache',\n              'Install to the specified cache directory.',\n            );\n          }\n\n          const yargsWithBrowserParam = this.#defineBrowserParameter(\n            yargs,\n            !Boolean(this.#pinnedBrowsers),\n          );\n          const yargsWithPlatformParam = this.#definePlatformParameter(\n            yargsWithBrowserParam,\n          );\n          return this.#definePathParameter(yargsWithPlatformParam, false)\n            .option('base-url', {\n              type: 'string',\n              desc: 'Base URL to download from',\n            })\n            .option('install-deps', {\n              type: 'boolean',\n              desc: 'Whether to attempt installing system dependencies (only supported on Linux, requires root privileges).',\n              default: false,\n            });\n        },\n        async args => {\n          if (this.#pinnedBrowsers && !args.browser) {\n            // Use allSettled to avoid scenarios that\n            // a browser may fail early and leave the other\n            // installation in a faulty state\n            const result = await Promise.allSettled(\n              Object.entries(this.#pinnedBrowsers).map(\n                async ([browser, options]) => {\n                  if (options.skipDownload) {\n                    return;\n                  }\n                  await this.#install({\n                    ...args,\n                    browser: {\n                      name: browser as Browser,\n                      buildId: options.buildId,\n                    },\n                  });\n                },\n              ),\n            );\n\n            for (const install of result) {\n              if (install.status === 'rejected') {\n                throw install.reason;\n              }\n            }\n          } else {\n            await this.#install(args);\n          }\n        },\n      )\n      .command(\n        'launch <browser>',\n        'Launch the specified browser',\n        yargs => {\n          yargs\n            .example(\n              '$0 launch chrome@115.0.5790.170',\n              'Launch Chrome 115.0.5790.170',\n            )\n            .example(\n              '$0 launch firefox@112.0a1',\n              'Launch the Firefox browser identified by the milestone 112.0a1.',\n            )\n            .example(\n              '$0 launch chrome@115.0.5790.170 --detached',\n              'Launch the browser but detach the sub-processes.',\n            )\n            .example(\n              '$0 launch chrome@canary --system',\n              'Try to locate the Canary build of Chrome installed on the system and launch it.',\n            )\n            .example(\n              '$0 launch chrome@115.0.5790.170 -- --version',\n              'Launch Chrome 115.0.5790.170 and pass custom argument to the binary.',\n            );\n\n          const yargsWithExtraAgs = yargs.parserConfiguration({\n            'populate--': true,\n            // Yargs does not have the correct overload for this.\n          }) as Yargs.Argv<{'--'?: Array<string | number>}>;\n          const yargsWithBrowserParam = this.#defineBrowserParameter(\n            yargsWithExtraAgs,\n            true,\n          );\n          const yargsWithPlatformParam = this.#definePlatformParameter(\n            yargsWithBrowserParam,\n          );\n          return this.#definePathParameter(yargsWithPlatformParam)\n            .option('detached', {\n              type: 'boolean',\n              desc: 'Detach the child process.',\n              default: false,\n            })\n            .option('system', {\n              type: 'boolean',\n              desc: 'Search for a browser installed on the system instead of the cache folder.',\n              default: false,\n            })\n            .option('dumpio', {\n              type: 'boolean',\n              desc: \"Forwards the browser's process stdout and stderr\",\n              default: false,\n            });\n        },\n        async args => {\n          const extraArgs = args['--']?.filter(arg => {\n            return typeof arg === 'string';\n          });\n\n          const executablePath = args.system\n            ? computeSystemExecutablePath({\n                browser: args.browser.name,\n                // TODO: throw an error if not a ChromeReleaseChannel is provided.\n                channel: args.browser.buildId as ChromeReleaseChannel,\n                platform: args.platform,\n              })\n            : computeExecutablePath({\n                browser: args.browser.name,\n                buildId: args.browser.buildId,\n                cacheDir: args.path ?? this.#cachePath,\n                platform: args.platform,\n              });\n          launch({\n            args: extraArgs,\n            executablePath,\n            dumpio: args.dumpio,\n            detached: args.detached,\n          });\n        },\n      )\n      .command(\n        'clear',\n        this.#allowCachePathOverride\n          ? 'Removes all installed browsers from the specified cache directory'\n          : `Removes all installed browsers from ${this.#cachePath}`,\n        yargs => {\n          return this.#definePathParameter(yargs, true);\n        },\n        async args => {\n          const cacheDir = args.path ?? this.#cachePath;\n          const rl = this.#rl ?? readline.createInterface({input, output});\n          rl.question(\n            `Do you want to permanently and recursively delete the content of ${cacheDir} (yes/No)? `,\n            answer => {\n              rl.close();\n              if (!['y', 'yes'].includes(answer.toLowerCase().trim())) {\n                console.log('Cancelled.');\n                return;\n              }\n              const cache = new Cache(cacheDir);\n              cache.clear();\n              console.log(`${cacheDir} cleared.`);\n            },\n          );\n        },\n      )\n      .command(\n        'list',\n        'List all installed browsers in the cache directory',\n        yargs => {\n          yargs.example(\n            '$0 list',\n            'List all installed browsers in the cache directory',\n          );\n          if (this.#allowCachePathOverride) {\n            yargs.example(\n              '$0 list --path /tmp/my-browser-cache',\n              'List browsers installed in the specified cache directory',\n            );\n          }\n\n          return this.#definePathParameter(yargs);\n        },\n        async args => {\n          const cacheDir = args.path ?? this.#cachePath;\n          const cache = new Cache(cacheDir);\n          const browsers = cache.getInstalledBrowsers();\n\n          for (const browser of browsers) {\n            console.log(\n              `${browser.browser}@${browser.buildId} (${browser.platform}) ${browser.executablePath}`,\n            );\n          }\n        },\n      )\n      .demandCommand(1)\n      .help();\n  }\n\n  #parseBrowser(version: string): Browser {\n    return version.split('@').shift() as Browser;\n  }\n\n  #parseBuildId(version: string): string {\n    const parts = version.split('@');\n    return parts.length === 2\n      ? parts[1]!\n      : this.#pinnedBrowsers\n        ? 'pinned'\n        : 'latest';\n  }\n\n  async #install(args: InstallArgs) {\n    args.platform ??= detectBrowserPlatform();\n    if (!args.browser) {\n      throw new Error(`No browser arg provided`);\n    }\n    if (!args.platform) {\n      throw new Error(`Could not resolve the current platform`);\n    }\n    if (args.browser.buildId === 'pinned') {\n      const options = this.#pinnedBrowsers?.[args.browser.name];\n      if (!options || !options.buildId) {\n        throw new Error(`No pinned version found for ${args.browser.name}`);\n      }\n      args.browser.buildId = options.buildId;\n    }\n    const originalBuildId = args.browser.buildId;\n    args.browser.buildId = await resolveBuildId(\n      args.browser.name,\n      args.platform,\n      args.browser.buildId,\n    );\n    await install({\n      browser: args.browser.name,\n      buildId: args.browser.buildId,\n      platform: args.platform,\n      cacheDir: args.path ?? this.#cachePath,\n      downloadProgressCallback: 'default',\n      baseUrl: args.baseUrl,\n      buildIdAlias:\n        originalBuildId !== args.browser.buildId ? originalBuildId : undefined,\n      installDeps: args.installDeps,\n    });\n    console.log(\n      `${args.browser.name}@${args.browser.buildId} ${computeExecutablePath({\n        browser: args.browser.name,\n        buildId: args.browser.buildId,\n        cacheDir: args.path ?? this.#cachePath,\n        platform: args.platform,\n      })}`,\n    );\n  }\n}\n"],"mappings":"AAAA;;;;;AAMA,SAAQA,KAAK,IAAIC,KAAK,EAAEC,MAAM,IAAIC,MAAM,QAAO,cAAc;AAC7D,OAAO,KAAKC,QAAQ,MAAM,eAAe;AAIzC,SACEC,cAAc,EAEdC,eAAe,QAEV,gCAAgC;AACvC,SAAQC,KAAK,QAAO,YAAY;AAChC,SAAQC,qBAAqB,QAAO,qBAAqB;AACzD,SAAQC,cAAc,QAAO,wBAAwB;AACrD,SAAQC,OAAO,QAAO,cAAc;AACpC,SACEC,qBAAqB,EACrBC,2BAA2B,EAC3BC,MAAM,QACD,aAAa;AAcpB;;;AAGA,OAAM,MAAOC,GAAG;EACd,CAAAC,SAAU;EACV,CAAAC,EAAG;EACH,CAAAC,UAAW;EACX,CAAAC,OAAQ;EACR,CAAAC,sBAAuB;EACvB,CAAAC,cAAe;EASf,CAAAC,aAAc;EAEdC,YACEC,IAiBK,EACLP,EAAuB;IAEvB,IAAI,CAACO,IAAI,EAAE;MACTA,IAAI,GAAG,EAAE;IACX;IACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAG;QACLR,SAAS,EAAEQ;OACZ;IACH;IACA,IAAI,CAAC,CAAAR,SAAU,GAAGQ,IAAI,CAACR,SAAS,IAAIS,OAAO,CAACC,GAAG,EAAE;IACjD,IAAI,CAAC,CAAAT,EAAG,GAAGA,EAAE;IACb,IAAI,CAAC,CAAAC,UAAW,GAAGM,IAAI,CAACN,UAAU,IAAI,qBAAqB;IAC3D,IAAI,CAAC,CAAAC,OAAQ,GAAGK,IAAI,CAACL,OAAO,IAAIT,cAAc;IAC9C,IAAI,CAAC,CAAAU,sBAAuB,GAAGI,IAAI,CAACJ,sBAAsB,IAAI,IAAI;IAClE,IAAI,CAAC,CAAAC,cAAe,GAAGG,IAAI,CAACH,cAAc;IAC1C,IAAI,CAAC,CAAAC,aAAc,GAAGE,IAAI,CAACF,aAAa;EAC1C;EAUA,CAAAK,sBAAuBC,CAAIC,KAAoB,EAAEC,QAAiB;IAChE,OAAOD,KAAK,CAACE,UAAU,CAAC,SAAS,EAAE;MACjCC,WAAW,EACT,0LAA0L;MAC5LC,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAGC,GAAG,IAAoB;QAC9B,OAAO;UACLC,IAAI,EAAE,IAAI,CAAC,CAAAC,YAAa,CAACF,GAAG,CAAC;UAC7BG,OAAO,EAAE,IAAI,CAAC,CAAAC,YAAa,CAACJ,GAAG;SAChC;MACH,CAAC;MACDK,YAAY,EAAEV;KACf,CAAC;EACJ;EAEA,CAAAW,uBAAwBC,CAAIb,KAAoB;IAC9C,OAAOA,KAAK,CAACc,MAAM,CAAC,UAAU,EAAE;MAC9BV,IAAI,EAAE,QAAQ;MACdW,IAAI,EAAE,uDAAuD;MAC7DC,OAAO,EAAEC,MAAM,CAACC,MAAM,CAACxC,eAAe,CAAC;MACvCyC,kBAAkB,EAAE;KACrB,CAAC;EACJ;EAEA,CAAAC,mBAAoBC,CAAIrB,KAAoB,EAAEC,QAAQ,GAAG,KAAK;IAC5D,IAAI,CAAC,IAAI,CAAC,CAAAV,sBAAuB,EAAE;MACjC,OAAOS,KAA0C;IACnD;IAEA,OAAOA,KAAK,CAACc,MAAM,CAAC,MAAM,EAAE;MAC1BV,IAAI,EAAE,QAAQ;MACdW,IAAI,EAAE,gQAAgQ;MACtQI,kBAAkB,EAAE,2BAA2B;MAC/C,IAAIlB,QAAQ,GAAG,EAAE,GAAG;QAACqB,OAAO,EAAE1B,OAAO,CAACC,GAAG;MAAE,CAAC,CAAC;MAC7Cc,YAAY,EAAEV;KACf,CAAC;EACJ;EAEA,MAAMsB,GAAGA,CAACC,IAAc;IACtB,MAAM;MAACF,OAAO,EAAEtB;IAAK,CAAC,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC;IAC9C,MAAM;MAACyB;IAAO,CAAC,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC;IAC/C,MAAMC,aAAa,GAAG1B,KAAK,CAACyB,OAAO,CAACD,IAAI,CAAC,CAAC;IAC1C,IAAIG,MAAM,GAAGD,aAAa,CACvBrC,UAAU,CAAC,IAAI,CAAC,CAAAA,UAAW,CAAC,CAC5BC,OAAO,CAAC,IAAI,CAAC,CAAAA,OAAQ,CAAC;IACzB,IAAI,IAAI,CAAC,CAAAG,aAAc,EAAE;MACvBkC,MAAM,GAAGA,MAAM,CAACC,OAAO,CACrB,IAAI,CAAC,CAAAnC,aAAc,CAACoC,GAAG,EACvB,IAAI,CAAC,CAAApC,aAAc,CAACU,WAAW,EAC/BH,KAAK,IAAG;QACN,OAAO,IAAI,CAAC,CAAA8B,KAAM,CAAC9B,KAAK,CAAC;MAC3B,CAAC,CACF;IACH,CAAC,MAAM;MACL2B,MAAM,GAAG,IAAI,CAAC,CAAAG,KAAM,CAACH,MAAM,CAAC;IAC9B;IACA,MAAMA,MAAM,CACTI,aAAa,CAAC,CAAC,CAAC,CAChBC,IAAI,EAAE,CACNC,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAET,aAAa,CAACU,aAAa,EAAE,CAAC,CAAC,CAClDC,UAAU,EAAE;EACjB;EAEA,CAAAP,KAAMQ,CAACtC,KAA0B;IAC/B,MAAMuC,cAAc,GAAG,IAAI,CAAC,CAAA/C,cAAe,GAAG,QAAQ,GAAG,QAAQ;IACjE;IACA,MAAMgD,cAAc,GAAG,IAAI,CAAC,CAAAhD,cAAe,GAAG,WAAW,GAAG,WAAW;IACvE,OAAOQ,KAAK,CACT4B,OAAO,CACN,WAAWY,cAAc,EAAE,EAC3B,oNAAoN,EACpNxC,KAAK,IAAG;MACN,IAAI,IAAI,CAAC,CAAAR,cAAe,EAAE;QACxBQ,KAAK,CAACyC,OAAO,CAAC,YAAY,EAAE,6BAA6B,CAAC;MAC5D;MACAzC,KAAK,CACFyC,OAAO,CACN,mBAAmB,EACnB,eAAeF,cAAc,yCAAyC,CACvE,CACAE,OAAO,CACN,0BAA0B,EAC1B,4DAA4D,CAC7D,CACAA,OAAO,CACN,0BAA0B,EAC1B,oFAAoF,CACrF,CACAA,OAAO,CACN,wBAAwB,EACxB,kFAAkF,CACnF,CACAA,OAAO,CACN,uBAAuB,EACvB,iFAAiF,CAClF,CACAA,OAAO,CACN,0BAA0B,EAC1B,mEAAmE,CACpE,CACAA,OAAO,CACN,uBAAuB,EACvB,oDAAoD,CACrD,CACAA,OAAO,CACN,gCAAgC,EAChC,6DAA6D,CAC9D,CACAA,OAAO,CACN,6BAA6B,EAC7B,0DAA0D,CAC3D,CACAA,OAAO,CACN,oCAAoC,EACpC,2EAA2E,CAC5E,CACAA,OAAO,CACN,kCAAkC,EAClC,2DAA2D,CAC5D,CACAA,OAAO,CACN,uCAAuC,EACvC,6FAA6F,CAC9F,CACAA,OAAO,CACN,sCAAsC,EACtC,+DAA+D,CAChE,CACAA,OAAO,CACN,6BAA6B,EAC7B,uDAAuD,CACxD,CACAA,OAAO,CACN,oBAAoB,EACpB,oEAAoE,CACrE,CACAA,OAAO,CACN,2BAA2B,EAC3B,yDAAyD,CAC1D,CACAA,OAAO,CACN,yBAAyB,EACzB,uDAAuD,CACxD,CACAA,OAAO,CACN,+BAA+B,EAC/B,6DAA6D,CAC9D,CACAA,OAAO,CACN,wBAAwB,EACxB,sDAAsD,CACvD,CACAA,OAAO,CACN,4BAA4B,EAC5B,0DAA0D,CAC3D,CACAA,OAAO,CACN,mCAAmC,EACnC,oDAAoD,CACrD,CACAA,OAAO,CACN,mCAAmC,EACnC,8DAA8D,CAC/D;MACH,IAAI,IAAI,CAAC,CAAAlD,sBAAuB,EAAE;QAChCS,KAAK,CAACyC,OAAO,CACX,iDAAiD,EACjD,2CAA2C,CAC5C;MACH;MAEA,MAAMC,qBAAqB,GAAG,IAAI,CAAC,CAAA5C,sBAAuB,CACxDE,KAAK,EACL,CAAC2C,OAAO,CAAC,IAAI,CAAC,CAAAnD,cAAe,CAAC,CAC/B;MACD,MAAMoD,sBAAsB,GAAG,IAAI,CAAC,CAAAhC,uBAAwB,CAC1D8B,qBAAqB,CACtB;MACD,OAAO,IAAI,CAAC,CAAAtB,mBAAoB,CAACwB,sBAAsB,EAAE,KAAK,CAAC,CAC5D9B,MAAM,CAAC,UAAU,EAAE;QAClBV,IAAI,EAAE,QAAQ;QACdW,IAAI,EAAE;OACP,CAAC,CACDD,MAAM,CAAC,cAAc,EAAE;QACtBV,IAAI,EAAE,SAAS;QACfW,IAAI,EAAE,wGAAwG;QAC9GO,OAAO,EAAE;OACV,CAAC;IACN,CAAC,EACD,MAAMuB,IAAI,IAAG;MACX,IAAI,IAAI,CAAC,CAAArD,cAAe,IAAI,CAACqD,IAAI,CAACC,OAAO,EAAE;QACzC;QACA;QACA;QACA,MAAMC,MAAM,GAAG,MAAMC,OAAO,CAACC,UAAU,CACrChC,MAAM,CAACiC,OAAO,CAAC,IAAI,CAAC,CAAA1D,cAAe,CAAC,CAAC2D,GAAG,CACtC,OAAO,CAACL,OAAO,EAAEM,OAAO,CAAC,KAAI;UAC3B,IAAIA,OAAO,CAACC,YAAY,EAAE;YACxB;UACF;UACA,MAAM,IAAI,CAAC,CAAAvE,OAAQ,CAAC;YAClB,GAAG+D,IAAI;YACPC,OAAO,EAAE;cACPvC,IAAI,EAAEuC,OAAkB;cACxBrC,OAAO,EAAE2C,OAAO,CAAC3C;;WAEpB,CAAC;QACJ,CAAC,CACF,CACF;QAED,KAAK,MAAM3B,OAAO,IAAIiE,MAAM,EAAE;UAC5B,IAAIjE,OAAO,CAACwE,MAAM,KAAK,UAAU,EAAE;YACjC,MAAMxE,OAAO,CAACyE,MAAM;UACtB;QACF;MACF,CAAC,MAAM;QACL,MAAM,IAAI,CAAC,CAAAzE,OAAQ,CAAC+D,IAAI,CAAC;MAC3B;IACF,CAAC,CACF,CACAjB,OAAO,CACN,kBAAkB,EAClB,8BAA8B,EAC9B5B,KAAK,IAAG;MACNA,KAAK,CACFyC,OAAO,CACN,iCAAiC,EACjC,8BAA8B,CAC/B,CACAA,OAAO,CACN,2BAA2B,EAC3B,iEAAiE,CAClE,CACAA,OAAO,CACN,4CAA4C,EAC5C,kDAAkD,CACnD,CACAA,OAAO,CACN,kCAAkC,EAClC,iFAAiF,CAClF,CACAA,OAAO,CACN,8CAA8C,EAC9C,sEAAsE,CACvE;MAEH,MAAMe,iBAAiB,GAAGxD,KAAK,CAACyD,mBAAmB,CAAC;QAClD,YAAY,EAAE;QACd;OACD,CAAgD;MACjD,MAAMf,qBAAqB,GAAG,IAAI,CAAC,CAAA5C,sBAAuB,CACxD0D,iBAAiB,EACjB,IAAI,CACL;MACD,MAAMZ,sBAAsB,GAAG,IAAI,CAAC,CAAAhC,uBAAwB,CAC1D8B,qBAAqB,CACtB;MACD,OAAO,IAAI,CAAC,CAAAtB,mBAAoB,CAACwB,sBAAsB,CAAC,CACrD9B,MAAM,CAAC,UAAU,EAAE;QAClBV,IAAI,EAAE,SAAS;QACfW,IAAI,EAAE,2BAA2B;QACjCO,OAAO,EAAE;OACV,CAAC,CACDR,MAAM,CAAC,QAAQ,EAAE;QAChBV,IAAI,EAAE,SAAS;QACfW,IAAI,EAAE,2EAA2E;QACjFO,OAAO,EAAE;OACV,CAAC,CACDR,MAAM,CAAC,QAAQ,EAAE;QAChBV,IAAI,EAAE,SAAS;QACfW,IAAI,EAAE,kDAAkD;QACxDO,OAAO,EAAE;OACV,CAAC;IACN,CAAC,EACD,MAAMuB,IAAI,IAAG;MACX,MAAMa,SAAS,GAAGb,IAAI,CAAC,IAAI,CAAC,EAAEc,MAAM,CAACC,GAAG,IAAG;QACzC,OAAO,OAAOA,GAAG,KAAK,QAAQ;MAChC,CAAC,CAAC;MAEF,MAAMC,cAAc,GAAGhB,IAAI,CAACiB,MAAM,GAC9B9E,2BAA2B,CAAC;QAC1B8D,OAAO,EAAED,IAAI,CAACC,OAAO,CAACvC,IAAI;QAC1B;QACAwD,OAAO,EAAElB,IAAI,CAACC,OAAO,CAACrC,OAA+B;QACrDuD,QAAQ,EAAEnB,IAAI,CAACmB;OAChB,CAAC,GACFjF,qBAAqB,CAAC;QACpB+D,OAAO,EAAED,IAAI,CAACC,OAAO,CAACvC,IAAI;QAC1BE,OAAO,EAAEoC,IAAI,CAACC,OAAO,CAACrC,OAAO;QAC7BwD,QAAQ,EAAEpB,IAAI,CAACqB,IAAI,IAAI,IAAI,CAAC,CAAA/E,SAAU;QACtC6E,QAAQ,EAAEnB,IAAI,CAACmB;OAChB,CAAC;MACN/E,MAAM,CAAC;QACL4D,IAAI,EAAEa,SAAS;QACfG,cAAc;QACdM,MAAM,EAAEtB,IAAI,CAACsB,MAAM;QACnBC,QAAQ,EAAEvB,IAAI,CAACuB;OAChB,CAAC;IACJ,CAAC,CACF,CACAxC,OAAO,CACN,OAAO,EACP,IAAI,CAAC,CAAArC,sBAAuB,GACxB,mEAAmE,GACnE,uCAAuC,IAAI,CAAC,CAAAJ,SAAU,EAAE,EAC5Da,KAAK,IAAG;MACN,OAAO,IAAI,CAAC,CAAAoB,mBAAoB,CAACpB,KAAK,EAAE,IAAI,CAAC;IAC/C,CAAC,EACD,MAAM6C,IAAI,IAAG;MACX,MAAMoB,QAAQ,GAAGpB,IAAI,CAACqB,IAAI,IAAI,IAAI,CAAC,CAAA/E,SAAU;MAC7C,MAAMC,EAAE,GAAG,IAAI,CAAC,CAAAA,EAAG,IAAIZ,QAAQ,CAAC6F,eAAe,CAAC;QAAChG,KAAK;QAAEE;MAAM,CAAC,CAAC;MAChEa,EAAE,CAACkF,QAAQ,CACT,oEAAoEL,QAAQ,aAAa,EACzFM,MAAM,IAAG;QACPnF,EAAE,CAACoF,KAAK,EAAE;QACV,IAAI,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAACC,QAAQ,CAACF,MAAM,CAACG,WAAW,EAAE,CAACC,IAAI,EAAE,CAAC,EAAE;UACvDC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;UACzB;QACF;QACA,MAAMC,KAAK,GAAG,IAAInG,KAAK,CAACsF,QAAQ,CAAC;QACjCa,KAAK,CAACC,KAAK,EAAE;QACbH,OAAO,CAACC,GAAG,CAAC,GAAGZ,QAAQ,WAAW,CAAC;MACrC,CAAC,CACF;IACH,CAAC,CACF,CACArC,OAAO,CACN,MAAM,EACN,oDAAoD,EACpD5B,KAAK,IAAG;MACNA,KAAK,CAACyC,OAAO,CACX,SAAS,EACT,oDAAoD,CACrD;MACD,IAAI,IAAI,CAAC,CAAAlD,sBAAuB,EAAE;QAChCS,KAAK,CAACyC,OAAO,CACX,sCAAsC,EACtC,0DAA0D,CAC3D;MACH;MAEA,OAAO,IAAI,CAAC,CAAArB,mBAAoB,CAACpB,KAAK,CAAC;IACzC,CAAC,EACD,MAAM6C,IAAI,IAAG;MACX,MAAMoB,QAAQ,GAAGpB,IAAI,CAACqB,IAAI,IAAI,IAAI,CAAC,CAAA/E,SAAU;MAC7C,MAAM2F,KAAK,GAAG,IAAInG,KAAK,CAACsF,QAAQ,CAAC;MACjC,MAAMe,QAAQ,GAAGF,KAAK,CAACG,oBAAoB,EAAE;MAE7C,KAAK,MAAMnC,OAAO,IAAIkC,QAAQ,EAAE;QAC9BJ,OAAO,CAACC,GAAG,CACT,GAAG/B,OAAO,CAACA,OAAO,IAAIA,OAAO,CAACrC,OAAO,KAAKqC,OAAO,CAACkB,QAAQ,KAAKlB,OAAO,CAACe,cAAc,EAAE,CACxF;MACH;IACF,CAAC,CACF,CACA9B,aAAa,CAAC,CAAC,CAAC,CAChBC,IAAI,EAAE;EACX;EAEA,CAAAxB,YAAa0E,CAAC5F,OAAe;IAC3B,OAAOA,OAAO,CAAC6F,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,EAAa;EAC9C;EAEA,CAAA1E,YAAa2E,CAAC/F,OAAe;IAC3B,MAAMgG,KAAK,GAAGhG,OAAO,CAAC6F,KAAK,CAAC,GAAG,CAAC;IAChC,OAAOG,KAAK,CAACC,MAAM,KAAK,CAAC,GACrBD,KAAK,CAAC,CAAC,CAAE,GACT,IAAI,CAAC,CAAA9F,cAAe,GAClB,QAAQ,GACR,QAAQ;EAChB;EAEA,MAAM,CAAAV,OAAQ0G,CAAC3C,IAAiB;IAC9BA,IAAI,CAACmB,QAAQ,KAAKpF,qBAAqB,EAAE;IACzC,IAAI,CAACiE,IAAI,CAACC,OAAO,EAAE;MACjB,MAAM,IAAI2C,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IACA,IAAI,CAAC5C,IAAI,CAACmB,QAAQ,EAAE;MAClB,MAAM,IAAIyB,KAAK,CAAC,wCAAwC,CAAC;IAC3D;IACA,IAAI5C,IAAI,CAACC,OAAO,CAACrC,OAAO,KAAK,QAAQ,EAAE;MACrC,MAAM2C,OAAO,GAAG,IAAI,CAAC,CAAA5D,cAAe,GAAGqD,IAAI,CAACC,OAAO,CAACvC,IAAI,CAAC;MACzD,IAAI,CAAC6C,OAAO,IAAI,CAACA,OAAO,CAAC3C,OAAO,EAAE;QAChC,MAAM,IAAIgF,KAAK,CAAC,+BAA+B5C,IAAI,CAACC,OAAO,CAACvC,IAAI,EAAE,CAAC;MACrE;MACAsC,IAAI,CAACC,OAAO,CAACrC,OAAO,GAAG2C,OAAO,CAAC3C,OAAO;IACxC;IACA,MAAMiF,eAAe,GAAG7C,IAAI,CAACC,OAAO,CAACrC,OAAO;IAC5CoC,IAAI,CAACC,OAAO,CAACrC,OAAO,GAAG,MAAMhC,cAAc,CACzCoE,IAAI,CAACC,OAAO,CAACvC,IAAI,EACjBsC,IAAI,CAACmB,QAAQ,EACbnB,IAAI,CAACC,OAAO,CAACrC,OAAO,CACrB;IACD,MAAM3B,OAAO,CAAC;MACZgE,OAAO,EAAED,IAAI,CAACC,OAAO,CAACvC,IAAI;MAC1BE,OAAO,EAAEoC,IAAI,CAACC,OAAO,CAACrC,OAAO;MAC7BuD,QAAQ,EAAEnB,IAAI,CAACmB,QAAQ;MACvBC,QAAQ,EAAEpB,IAAI,CAACqB,IAAI,IAAI,IAAI,CAAC,CAAA/E,SAAU;MACtCwG,wBAAwB,EAAE,SAAS;MACnCC,OAAO,EAAE/C,IAAI,CAAC+C,OAAO;MACrBC,YAAY,EACVH,eAAe,KAAK7C,IAAI,CAACC,OAAO,CAACrC,OAAO,GAAGiF,eAAe,GAAGI,SAAS;MACxEC,WAAW,EAAElD,IAAI,CAACkD;KACnB,CAAC;IACFnB,OAAO,CAACC,GAAG,CACT,GAAGhC,IAAI,CAACC,OAAO,CAACvC,IAAI,IAAIsC,IAAI,CAACC,OAAO,CAACrC,OAAO,IAAI1B,qBAAqB,CAAC;MACpE+D,OAAO,EAAED,IAAI,CAACC,OAAO,CAACvC,IAAI;MAC1BE,OAAO,EAAEoC,IAAI,CAACC,OAAO,CAACrC,OAAO;MAC7BwD,QAAQ,EAAEpB,IAAI,CAACqB,IAAI,IAAI,IAAI,CAAC,CAAA/E,SAAU;MACtC6E,QAAQ,EAAEnB,IAAI,CAACmB;KAChB,CAAC,EAAE,CACL;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}