{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __addDisposableResource = this && this.__addDisposableResource || function (env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function () {\n      try {\n        inner.call(this);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n    env.stack.push({\n      value: value,\n      dispose: dispose,\n      async: async\n    });\n  } else if (async) {\n    env.stack.push({\n      async: true\n    });\n  }\n  return value;\n};\nvar __disposeResources = this && this.__disposeResources || function (SuppressedError) {\n  return function (env) {\n    function fail(e) {\n      env.error = env.hasError ? new SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n      env.hasError = true;\n    }\n    var r,\n      s = 0;\n    function next() {\n      while (r = env.stack.pop()) {\n        try {\n          if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n          if (r.dispose) {\n            var result = r.dispose.call(r.value);\n            if (r.async) return s |= 2, Promise.resolve(result).then(next, function (e) {\n              fail(e);\n              return next();\n            });\n          } else s |= 1;\n        } catch (e) {\n          fail(e);\n        }\n      }\n      if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n      if (env.hasError) throw env.error;\n    }\n    return next();\n  };\n}(typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n});\nimport { firstValueFrom, from, raceWith } from '../../third_party/rxjs/rxjs.js';\nimport { CDPSessionEvent } from '../api/CDPSession.js';\nimport { Page } from '../api/Page.js';\nimport { ConsoleMessage } from '../common/ConsoleMessage.js';\nimport { TargetCloseError } from '../common/Errors.js';\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { FileChooser } from '../common/FileChooser.js';\nimport { NetworkManagerEvent } from '../common/NetworkManagerEvents.js';\nimport { debugError, evaluationString, getReadableAsTypedArray, getReadableFromProtocolStream, parsePDFOptions, timeout, validateDialogType } from '../common/util.js';\nimport { assert } from '../util/assert.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { AsyncDisposableStack } from '../util/disposable.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { Binding } from './Binding.js';\nimport { CdpCDPSession } from './CdpSession.js';\nimport { isTargetClosedError } from './Connection.js';\nimport { Coverage } from './Coverage.js';\nimport { CdpDialog } from './Dialog.js';\nimport { EmulationManager } from './EmulationManager.js';\nimport { FrameManager } from './FrameManager.js';\nimport { FrameManagerEvent } from './FrameManagerEvents.js';\nimport { CdpKeyboard, CdpMouse, CdpTouchscreen } from './Input.js';\nimport { MAIN_WORLD } from './IsolatedWorlds.js';\nimport { releaseObject } from './JSHandle.js';\nimport { Tracing } from './Tracing.js';\nimport { createClientError, pageBindingInitString, valueFromRemoteObject } from './utils.js';\nimport { CdpWebWorker } from './WebWorker.js';\nfunction convertConsoleMessageLevel(method) {\n  switch (method) {\n    case 'warning':\n      return 'warn';\n    default:\n      return method;\n  }\n}\n/**\n * @internal\n */\nexport class CdpPage extends Page {\n  static async _create(client, target, defaultViewport) {\n    const page = new CdpPage(client, target);\n    await page.#initialize();\n    if (defaultViewport) {\n      try {\n        await page.setViewport(defaultViewport);\n      } catch (err) {\n        if (isErrorLike(err) && isTargetClosedError(err)) {\n          debugError(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n    return page;\n  }\n  #closed = false;\n  #targetManager;\n  #primaryTargetClient;\n  #primaryTarget;\n  #tabTargetClient;\n  #tabTarget;\n  #keyboard;\n  #mouse;\n  #touchscreen;\n  #frameManager;\n  #emulationManager;\n  #tracing;\n  #bindings = new Map();\n  #exposedFunctions = new Map();\n  #coverage;\n  #viewport;\n  #workers = new Map();\n  #fileChooserDeferreds = new Set();\n  #sessionCloseDeferred = Deferred.create();\n  #serviceWorkerBypassed = false;\n  #userDragInterceptionEnabled = false;\n  constructor(client, target) {\n    super();\n    this.#primaryTargetClient = client;\n    this.#tabTargetClient = client.parentSession();\n    assert(this.#tabTargetClient, 'Tab target session is not defined.');\n    this.#tabTarget = this.#tabTargetClient.target();\n    assert(this.#tabTarget, 'Tab target is not defined.');\n    this.#primaryTarget = target;\n    this.#targetManager = target._targetManager();\n    this.#keyboard = new CdpKeyboard(client);\n    this.#mouse = new CdpMouse(client, this.#keyboard);\n    this.#touchscreen = new CdpTouchscreen(client, this.#keyboard);\n    this.#frameManager = new FrameManager(client, this, this._timeoutSettings);\n    this.#emulationManager = new EmulationManager(client);\n    this.#tracing = new Tracing(client);\n    this.#coverage = new Coverage(client);\n    this.#viewport = null;\n    const frameManagerEmitter = new EventEmitter(this.#frameManager);\n    frameManagerEmitter.on(FrameManagerEvent.FrameAttached, frame => {\n      this.emit(\"frameattached\" /* PageEvent.FrameAttached */, frame);\n    });\n    frameManagerEmitter.on(FrameManagerEvent.FrameDetached, frame => {\n      this.emit(\"framedetached\" /* PageEvent.FrameDetached */, frame);\n    });\n    frameManagerEmitter.on(FrameManagerEvent.FrameNavigated, frame => {\n      this.emit(\"framenavigated\" /* PageEvent.FrameNavigated */, frame);\n    });\n    frameManagerEmitter.on(FrameManagerEvent.ConsoleApiCalled, ([world, event]) => {\n      this.#onConsoleAPI(world, event);\n    });\n    frameManagerEmitter.on(FrameManagerEvent.BindingCalled, ([world, event]) => {\n      void this.#onBindingCalled(world, event);\n    });\n    const networkManagerEmitter = new EventEmitter(this.#frameManager.networkManager);\n    networkManagerEmitter.on(NetworkManagerEvent.Request, request => {\n      this.emit(\"request\" /* PageEvent.Request */, request);\n    });\n    networkManagerEmitter.on(NetworkManagerEvent.RequestServedFromCache, request => {\n      this.emit(\"requestservedfromcache\" /* PageEvent.RequestServedFromCache */, request);\n    });\n    networkManagerEmitter.on(NetworkManagerEvent.Response, response => {\n      this.emit(\"response\" /* PageEvent.Response */, response);\n    });\n    networkManagerEmitter.on(NetworkManagerEvent.RequestFailed, request => {\n      this.emit(\"requestfailed\" /* PageEvent.RequestFailed */, request);\n    });\n    networkManagerEmitter.on(NetworkManagerEvent.RequestFinished, request => {\n      this.emit(\"requestfinished\" /* PageEvent.RequestFinished */, request);\n    });\n    this.#tabTargetClient.on(CDPSessionEvent.Swapped, this.#onActivation.bind(this));\n    this.#tabTargetClient.on(CDPSessionEvent.Ready, this.#onSecondaryTarget.bind(this));\n    this.#targetManager.on(\"targetGone\" /* TargetManagerEvent.TargetGone */, this.#onDetachedFromTarget);\n    this.#tabTarget._isClosedDeferred.valueOrThrow().then(() => {\n      this.#targetManager.off(\"targetGone\" /* TargetManagerEvent.TargetGone */, this.#onDetachedFromTarget);\n      this.emit(\"close\" /* PageEvent.Close */, undefined);\n      this.#closed = true;\n    }).catch(debugError);\n    this.#setupPrimaryTargetListeners();\n    this.#attachExistingTargets();\n  }\n  #attachExistingTargets() {\n    const queue = [];\n    for (const childTarget of this.#targetManager.getChildTargets(this.#primaryTarget)) {\n      queue.push(childTarget);\n    }\n    let idx = 0;\n    while (idx < queue.length) {\n      const next = queue[idx];\n      idx++;\n      const session = next._session();\n      if (session) {\n        this.#onAttachedToTarget(session);\n      }\n      for (const childTarget of this.#targetManager.getChildTargets(next)) {\n        queue.push(childTarget);\n      }\n    }\n  }\n  async #onActivation(newSession) {\n    // TODO: Remove assert once we have separate Event type for CdpCDPSession.\n    assert(newSession instanceof CdpCDPSession, 'CDPSession is not instance of CdpCDPSession');\n    this.#primaryTargetClient = newSession;\n    this.#primaryTarget = newSession.target();\n    assert(this.#primaryTarget, 'Missing target on swap');\n    this.#keyboard.updateClient(newSession);\n    this.#mouse.updateClient(newSession);\n    this.#touchscreen.updateClient(newSession);\n    this.#emulationManager.updateClient(newSession);\n    this.#tracing.updateClient(newSession);\n    this.#coverage.updateClient(newSession);\n    await this.#frameManager.swapFrameTree(newSession);\n    this.#setupPrimaryTargetListeners();\n  }\n  async #onSecondaryTarget(session) {\n    assert(session instanceof CdpCDPSession);\n    if (session.target()._subtype() !== 'prerender') {\n      return;\n    }\n    this.#frameManager.registerSpeculativeSession(session).catch(debugError);\n    this.#emulationManager.registerSpeculativeSession(session).catch(debugError);\n  }\n  /**\n   * Sets up listeners for the primary target. The primary target can change\n   * during a navigation to a prerended page.\n   */\n  #setupPrimaryTargetListeners() {\n    const clientEmitter = new EventEmitter(this.#primaryTargetClient);\n    clientEmitter.on(CDPSessionEvent.Ready, this.#onAttachedToTarget);\n    clientEmitter.on(CDPSessionEvent.Disconnected, () => {\n      this.#sessionCloseDeferred.reject(new TargetCloseError('Target closed'));\n    });\n    clientEmitter.on('Page.domContentEventFired', () => {\n      this.emit(\"domcontentloaded\" /* PageEvent.DOMContentLoaded */, undefined);\n    });\n    clientEmitter.on('Page.loadEventFired', () => {\n      this.emit(\"load\" /* PageEvent.Load */, undefined);\n    });\n    clientEmitter.on('Page.javascriptDialogOpening', this.#onDialog.bind(this));\n    clientEmitter.on('Runtime.exceptionThrown', this.#handleException.bind(this));\n    clientEmitter.on('Inspector.targetCrashed', this.#onTargetCrashed.bind(this));\n    clientEmitter.on('Performance.metrics', this.#emitMetrics.bind(this));\n    clientEmitter.on('Log.entryAdded', this.#onLogEntryAdded.bind(this));\n    clientEmitter.on('Page.fileChooserOpened', this.#onFileChooser.bind(this));\n  }\n  #onDetachedFromTarget = target => {\n    const sessionId = target._session()?.id();\n    const worker = this.#workers.get(sessionId);\n    if (!worker) {\n      return;\n    }\n    this.#workers.delete(sessionId);\n    this.emit(\"workerdestroyed\" /* PageEvent.WorkerDestroyed */, worker);\n  };\n  #onAttachedToTarget = session => {\n    assert(session instanceof CdpCDPSession);\n    this.#frameManager.onAttachedToTarget(session.target());\n    if (session.target()._getTargetInfo().type === 'worker') {\n      const worker = new CdpWebWorker(session, session.target().url(), session.target()._targetId, session.target().type(), this.#addConsoleMessage.bind(this), this.#handleException.bind(this), this.#frameManager.networkManager);\n      this.#workers.set(session.id(), worker);\n      this.emit(\"workercreated\" /* PageEvent.WorkerCreated */, worker);\n    }\n    session.on(CDPSessionEvent.Ready, this.#onAttachedToTarget);\n  };\n  async #initialize() {\n    try {\n      await Promise.all([this.#frameManager.initialize(this.#primaryTargetClient), this.#primaryTargetClient.send('Performance.enable'), this.#primaryTargetClient.send('Log.enable')]);\n    } catch (err) {\n      if (isErrorLike(err) && isTargetClosedError(err)) {\n        debugError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n  async #onFileChooser(event) {\n    const env_1 = {\n      stack: [],\n      error: void 0,\n      hasError: false\n    };\n    try {\n      if (!this.#fileChooserDeferreds.size) {\n        return;\n      }\n      const frame = this.#frameManager.frame(event.frameId);\n      assert(frame, 'This should never happen.');\n      // This is guaranteed to be an HTMLInputElement handle by the event.\n      const handle = __addDisposableResource(env_1, await frame.worlds[MAIN_WORLD].adoptBackendNode(event.backendNodeId), false);\n      const fileChooser = new FileChooser(handle.move(), event.mode !== 'selectSingle');\n      for (const promise of this.#fileChooserDeferreds) {\n        promise.resolve(fileChooser);\n      }\n      this.#fileChooserDeferreds.clear();\n    } catch (e_1) {\n      env_1.error = e_1;\n      env_1.hasError = true;\n    } finally {\n      __disposeResources(env_1);\n    }\n  }\n  _client() {\n    return this.#primaryTargetClient;\n  }\n  isServiceWorkerBypassed() {\n    return this.#serviceWorkerBypassed;\n  }\n  isDragInterceptionEnabled() {\n    return this.#userDragInterceptionEnabled;\n  }\n  isJavaScriptEnabled() {\n    return this.#emulationManager.javascriptEnabled;\n  }\n  async waitForFileChooser(options = {}) {\n    const needsEnable = this.#fileChooserDeferreds.size === 0;\n    const {\n      timeout = this._timeoutSettings.timeout()\n    } = options;\n    const deferred = Deferred.create({\n      message: `Waiting for \\`FileChooser\\` failed: ${timeout}ms exceeded`,\n      timeout\n    });\n    if (options.signal) {\n      options.signal.addEventListener('abort', () => {\n        deferred.reject(options.signal?.reason);\n      }, {\n        once: true\n      });\n    }\n    this.#fileChooserDeferreds.add(deferred);\n    let enablePromise;\n    if (needsEnable) {\n      enablePromise = this.#primaryTargetClient.send('Page.setInterceptFileChooserDialog', {\n        enabled: true\n      });\n    }\n    try {\n      const [result] = await Promise.all([deferred.valueOrThrow(), enablePromise]);\n      return result;\n    } catch (error) {\n      this.#fileChooserDeferreds.delete(deferred);\n      throw error;\n    }\n  }\n  async setGeolocation(options) {\n    return await this.#emulationManager.setGeolocation(options);\n  }\n  target() {\n    return this.#primaryTarget;\n  }\n  browser() {\n    return this.#primaryTarget.browser();\n  }\n  browserContext() {\n    return this.#primaryTarget.browserContext();\n  }\n  #onTargetCrashed() {\n    this.emit(\"error\" /* PageEvent.Error */, new Error('Page crashed!'));\n  }\n  #onLogEntryAdded(event) {\n    const {\n      level,\n      text,\n      args,\n      source,\n      url,\n      lineNumber\n    } = event.entry;\n    if (args) {\n      args.map(arg => {\n        void releaseObject(this.#primaryTargetClient, arg);\n      });\n    }\n    if (source !== 'worker') {\n      this.emit(\"console\" /* PageEvent.Console */, new ConsoleMessage(convertConsoleMessageLevel(level), text, [], [{\n        url,\n        lineNumber\n      }]));\n    }\n  }\n  mainFrame() {\n    return this.#frameManager.mainFrame();\n  }\n  get keyboard() {\n    return this.#keyboard;\n  }\n  get touchscreen() {\n    return this.#touchscreen;\n  }\n  get coverage() {\n    return this.#coverage;\n  }\n  get tracing() {\n    return this.#tracing;\n  }\n  frames() {\n    return this.#frameManager.frames();\n  }\n  workers() {\n    return Array.from(this.#workers.values());\n  }\n  async setRequestInterception(value) {\n    return await this.#frameManager.networkManager.setRequestInterception(value);\n  }\n  async setBypassServiceWorker(bypass) {\n    this.#serviceWorkerBypassed = bypass;\n    return await this.#primaryTargetClient.send('Network.setBypassServiceWorker', {\n      bypass\n    });\n  }\n  async setDragInterception(enabled) {\n    this.#userDragInterceptionEnabled = enabled;\n    return await this.#primaryTargetClient.send('Input.setInterceptDrags', {\n      enabled\n    });\n  }\n  async setOfflineMode(enabled) {\n    return await this.#frameManager.networkManager.setOfflineMode(enabled);\n  }\n  async emulateNetworkConditions(networkConditions) {\n    return await this.#frameManager.networkManager.emulateNetworkConditions(networkConditions);\n  }\n  setDefaultNavigationTimeout(timeout) {\n    this._timeoutSettings.setDefaultNavigationTimeout(timeout);\n  }\n  setDefaultTimeout(timeout) {\n    this._timeoutSettings.setDefaultTimeout(timeout);\n  }\n  getDefaultTimeout() {\n    return this._timeoutSettings.timeout();\n  }\n  getDefaultNavigationTimeout() {\n    return this._timeoutSettings.navigationTimeout();\n  }\n  async queryObjects(prototypeHandle) {\n    assert(!prototypeHandle.disposed, 'Prototype JSHandle is disposed!');\n    assert(prototypeHandle.id, 'Prototype JSHandle must not be referencing primitive value');\n    const response = await this.mainFrame().client.send('Runtime.queryObjects', {\n      prototypeObjectId: prototypeHandle.id\n    });\n    return this.mainFrame().mainRealm().createCdpHandle(response.objects);\n  }\n  async cookies(...urls) {\n    const originalCookies = (await this.#primaryTargetClient.send('Network.getCookies', {\n      urls: urls.length ? urls : [this.url()]\n    })).cookies;\n    const unsupportedCookieAttributes = ['sourcePort'];\n    const filterUnsupportedAttributes = cookie => {\n      for (const attr of unsupportedCookieAttributes) {\n        delete cookie[attr];\n      }\n      return cookie;\n    };\n    return originalCookies.map(filterUnsupportedAttributes).map(cookie => {\n      return {\n        ...cookie,\n        // TODO: a breaking change is needed in Puppeteer types to support other\n        // partition keys.\n        partitionKey: cookie.partitionKey ? cookie.partitionKey.topLevelSite : undefined\n      };\n    });\n  }\n  async deleteCookie(...cookies) {\n    const pageURL = this.url();\n    for (const cookie of cookies) {\n      const item = {\n        ...cookie,\n        partitionKey: convertCookiesPartitionKeyFromPuppeteerToCdp(cookie.partitionKey)\n      };\n      if (!cookie.url && pageURL.startsWith('http')) {\n        item.url = pageURL;\n      }\n      await this.#primaryTargetClient.send('Network.deleteCookies', item);\n      if (pageURL.startsWith('http') && !item.partitionKey) {\n        const url = new URL(pageURL);\n        // Delete also cookies from the page's partition.\n        await this.#primaryTargetClient.send('Network.deleteCookies', {\n          ...item,\n          partitionKey: {\n            topLevelSite: url.origin.replace(`:${url.port}`, ''),\n            hasCrossSiteAncestor: false\n          }\n        });\n      }\n    }\n  }\n  async setCookie(...cookies) {\n    const pageURL = this.url();\n    const startsWithHTTP = pageURL.startsWith('http');\n    const items = cookies.map(cookie => {\n      const item = Object.assign({}, cookie);\n      if (!item.url && startsWithHTTP) {\n        item.url = pageURL;\n      }\n      assert(item.url !== 'about:blank', `Blank page can not have cookie \"${item.name}\"`);\n      assert(!String.prototype.startsWith.call(item.url || '', 'data:'), `Data URL page can not have cookie \"${item.name}\"`);\n      return item;\n    });\n    await this.deleteCookie(...items);\n    if (items.length) {\n      await this.#primaryTargetClient.send('Network.setCookies', {\n        cookies: items.map(cookieParam => {\n          return {\n            ...cookieParam,\n            partitionKey: convertCookiesPartitionKeyFromPuppeteerToCdp(cookieParam.partitionKey)\n          };\n        })\n      });\n    }\n  }\n  async exposeFunction(name,\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n  pptrFunction) {\n    if (this.#bindings.has(name)) {\n      throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);\n    }\n    const source = pageBindingInitString('exposedFun', name);\n    let binding;\n    switch (typeof pptrFunction) {\n      case 'function':\n        binding = new Binding(name, pptrFunction, source);\n        break;\n      default:\n        binding = new Binding(name, pptrFunction.default, source);\n        break;\n    }\n    this.#bindings.set(name, binding);\n    const [{\n      identifier\n    }] = await Promise.all([this.#frameManager.evaluateOnNewDocument(source), this.#frameManager.addExposedFunctionBinding(binding)]);\n    this.#exposedFunctions.set(name, identifier);\n  }\n  async removeExposedFunction(name) {\n    const exposedFunctionId = this.#exposedFunctions.get(name);\n    if (!exposedFunctionId) {\n      throw new Error(`Function with name \"${name}\" does not exist`);\n    }\n    // #bindings must be updated together with #exposedFunctions.\n    const binding = this.#bindings.get(name);\n    this.#exposedFunctions.delete(name);\n    this.#bindings.delete(name);\n    await Promise.all([this.#frameManager.removeScriptToEvaluateOnNewDocument(exposedFunctionId), this.#frameManager.removeExposedFunctionBinding(binding)]);\n  }\n  async authenticate(credentials) {\n    return await this.#frameManager.networkManager.authenticate(credentials);\n  }\n  async setExtraHTTPHeaders(headers) {\n    return await this.#frameManager.networkManager.setExtraHTTPHeaders(headers);\n  }\n  async setUserAgent(userAgent, userAgentMetadata) {\n    return await this.#frameManager.networkManager.setUserAgent(userAgent, userAgentMetadata);\n  }\n  async metrics() {\n    const response = await this.#primaryTargetClient.send('Performance.getMetrics');\n    return this.#buildMetricsObject(response.metrics);\n  }\n  #emitMetrics(event) {\n    this.emit(\"metrics\" /* PageEvent.Metrics */, {\n      title: event.title,\n      metrics: this.#buildMetricsObject(event.metrics)\n    });\n  }\n  #buildMetricsObject(metrics) {\n    const result = {};\n    for (const metric of metrics || []) {\n      if (supportedMetrics.has(metric.name)) {\n        result[metric.name] = metric.value;\n      }\n    }\n    return result;\n  }\n  #handleException(exception) {\n    this.emit(\"pageerror\" /* PageEvent.PageError */, createClientError(exception.exceptionDetails));\n  }\n  #onConsoleAPI(world, event) {\n    const values = event.args.map(arg => {\n      return world.createCdpHandle(arg);\n    });\n    this.#addConsoleMessage(convertConsoleMessageLevel(event.type), values, event.stackTrace);\n  }\n  async #onBindingCalled(world, event) {\n    let payload;\n    try {\n      payload = JSON.parse(event.payload);\n    } catch {\n      // The binding was either called by something in the page or it was\n      // called before our wrapper was initialized.\n      return;\n    }\n    const {\n      type,\n      name,\n      seq,\n      args,\n      isTrivial\n    } = payload;\n    if (type !== 'exposedFun') {\n      return;\n    }\n    const context = world.context;\n    if (!context) {\n      return;\n    }\n    const binding = this.#bindings.get(name);\n    await binding?.run(context, seq, args, isTrivial);\n  }\n  #addConsoleMessage(eventType, args, stackTrace) {\n    if (!this.listenerCount(\"console\" /* PageEvent.Console */)) {\n      args.forEach(arg => {\n        return arg.dispose();\n      });\n      return;\n    }\n    const textTokens = [];\n    // eslint-disable-next-line max-len -- The comment is long.\n    // eslint-disable-next-line rulesdir/use-using -- These are not owned by this function.\n    for (const arg of args) {\n      const remoteObject = arg.remoteObject();\n      if (remoteObject.objectId) {\n        textTokens.push(arg.toString());\n      } else {\n        textTokens.push(valueFromRemoteObject(remoteObject));\n      }\n    }\n    const stackTraceLocations = [];\n    if (stackTrace) {\n      for (const callFrame of stackTrace.callFrames) {\n        stackTraceLocations.push({\n          url: callFrame.url,\n          lineNumber: callFrame.lineNumber,\n          columnNumber: callFrame.columnNumber\n        });\n      }\n    }\n    const message = new ConsoleMessage(convertConsoleMessageLevel(eventType), textTokens.join(' '), args, stackTraceLocations);\n    this.emit(\"console\" /* PageEvent.Console */, message);\n  }\n  #onDialog(event) {\n    const type = validateDialogType(event.type);\n    const dialog = new CdpDialog(this.#primaryTargetClient, type, event.message, event.defaultPrompt);\n    this.emit(\"dialog\" /* PageEvent.Dialog */, dialog);\n  }\n  async reload(options) {\n    const [result] = await Promise.all([this.waitForNavigation({\n      ...options,\n      ignoreSameDocumentNavigation: true\n    }), this.#primaryTargetClient.send('Page.reload')]);\n    return result;\n  }\n  async createCDPSession() {\n    return await this.target().createCDPSession();\n  }\n  async goBack(options = {}) {\n    return await this.#go(-1, options);\n  }\n  async goForward(options = {}) {\n    return await this.#go(+1, options);\n  }\n  async #go(delta, options) {\n    const history = await this.#primaryTargetClient.send('Page.getNavigationHistory');\n    const entry = history.entries[history.currentIndex + delta];\n    if (!entry) {\n      return null;\n    }\n    const result = await Promise.all([this.waitForNavigation(options), this.#primaryTargetClient.send('Page.navigateToHistoryEntry', {\n      entryId: entry.id\n    })]);\n    return result[0];\n  }\n  async bringToFront() {\n    await this.#primaryTargetClient.send('Page.bringToFront');\n  }\n  async setJavaScriptEnabled(enabled) {\n    return await this.#emulationManager.setJavaScriptEnabled(enabled);\n  }\n  async setBypassCSP(enabled) {\n    await this.#primaryTargetClient.send('Page.setBypassCSP', {\n      enabled\n    });\n  }\n  async emulateMediaType(type) {\n    return await this.#emulationManager.emulateMediaType(type);\n  }\n  async emulateCPUThrottling(factor) {\n    return await this.#emulationManager.emulateCPUThrottling(factor);\n  }\n  async emulateMediaFeatures(features) {\n    return await this.#emulationManager.emulateMediaFeatures(features);\n  }\n  async emulateTimezone(timezoneId) {\n    return await this.#emulationManager.emulateTimezone(timezoneId);\n  }\n  async emulateIdleState(overrides) {\n    return await this.#emulationManager.emulateIdleState(overrides);\n  }\n  async emulateVisionDeficiency(type) {\n    return await this.#emulationManager.emulateVisionDeficiency(type);\n  }\n  async setViewport(viewport) {\n    const needsReload = await this.#emulationManager.emulateViewport(viewport);\n    this.#viewport = viewport;\n    if (needsReload) {\n      await this.reload();\n    }\n  }\n  viewport() {\n    return this.#viewport;\n  }\n  async evaluateOnNewDocument(pageFunction, ...args) {\n    const source = evaluationString(pageFunction, ...args);\n    return await this.#frameManager.evaluateOnNewDocument(source);\n  }\n  async removeScriptToEvaluateOnNewDocument(identifier) {\n    return await this.#frameManager.removeScriptToEvaluateOnNewDocument(identifier);\n  }\n  async setCacheEnabled(enabled = true) {\n    await this.#frameManager.networkManager.setCacheEnabled(enabled);\n  }\n  async _screenshot(options) {\n    const env_2 = {\n      stack: [],\n      error: void 0,\n      hasError: false\n    };\n    try {\n      const {\n        fromSurface,\n        omitBackground,\n        optimizeForSpeed,\n        quality,\n        clip: userClip,\n        type,\n        captureBeyondViewport\n      } = options;\n      const stack = __addDisposableResource(env_2, new AsyncDisposableStack(), true);\n      if (omitBackground && (type === 'png' || type === 'webp')) {\n        await this.#emulationManager.setTransparentBackgroundColor();\n        stack.defer(async () => {\n          await this.#emulationManager.resetDefaultBackgroundColor().catch(debugError);\n        });\n      }\n      let clip = userClip;\n      if (clip && !captureBeyondViewport) {\n        const viewport = await this.mainFrame().isolatedRealm().evaluate(() => {\n          const {\n            height,\n            pageLeft: x,\n            pageTop: y,\n            width\n          } = window.visualViewport;\n          return {\n            x,\n            y,\n            height,\n            width\n          };\n        });\n        clip = getIntersectionRect(clip, viewport);\n      }\n      const {\n        data\n      } = await this.#primaryTargetClient.send('Page.captureScreenshot', {\n        format: type,\n        optimizeForSpeed,\n        fromSurface,\n        ...(quality !== undefined ? {\n          quality: Math.round(quality)\n        } : {}),\n        ...(clip ? {\n          clip: {\n            ...clip,\n            scale: clip.scale ?? 1\n          }\n        } : {}),\n        captureBeyondViewport\n      });\n      return data;\n    } catch (e_2) {\n      env_2.error = e_2;\n      env_2.hasError = true;\n    } finally {\n      const result_1 = __disposeResources(env_2);\n      if (result_1) await result_1;\n    }\n  }\n  async createPDFStream(options = {}) {\n    const {\n      timeout: ms = this._timeoutSettings.timeout()\n    } = options;\n    const {\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      width: paperWidth,\n      height: paperHeight,\n      margin,\n      pageRanges,\n      preferCSSPageSize,\n      omitBackground,\n      tagged: generateTaggedPDF,\n      outline: generateDocumentOutline,\n      waitForFonts\n    } = parsePDFOptions(options);\n    if (omitBackground) {\n      await this.#emulationManager.setTransparentBackgroundColor();\n    }\n    if (waitForFonts) {\n      await firstValueFrom(from(this.mainFrame().isolatedRealm().evaluate(() => {\n        return document.fonts.ready;\n      })).pipe(raceWith(timeout(ms))));\n    }\n    const printCommandPromise = this.#primaryTargetClient.send('Page.printToPDF', {\n      transferMode: 'ReturnAsStream',\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      paperWidth,\n      paperHeight,\n      marginTop: margin.top,\n      marginBottom: margin.bottom,\n      marginLeft: margin.left,\n      marginRight: margin.right,\n      pageRanges,\n      preferCSSPageSize,\n      generateTaggedPDF,\n      generateDocumentOutline\n    });\n    const result = await firstValueFrom(from(printCommandPromise).pipe(raceWith(timeout(ms))));\n    if (omitBackground) {\n      await this.#emulationManager.resetDefaultBackgroundColor();\n    }\n    assert(result.stream, '`stream` is missing from `Page.printToPDF');\n    return await getReadableFromProtocolStream(this.#primaryTargetClient, result.stream);\n  }\n  async pdf(options = {}) {\n    const {\n      path = undefined\n    } = options;\n    const readable = await this.createPDFStream(options);\n    const typedArray = await getReadableAsTypedArray(readable, path);\n    assert(typedArray, 'Could not create typed array');\n    return typedArray;\n  }\n  async close(options = {\n    runBeforeUnload: undefined\n  }) {\n    const env_3 = {\n      stack: [],\n      error: void 0,\n      hasError: false\n    };\n    try {\n      const _guard = __addDisposableResource(env_3, await this.browserContext().waitForScreenshotOperations(), false);\n      const connection = this.#primaryTargetClient.connection();\n      assert(connection, 'Protocol error: Connection closed. Most likely the page has been closed.');\n      const runBeforeUnload = !!options.runBeforeUnload;\n      if (runBeforeUnload) {\n        await this.#primaryTargetClient.send('Page.close');\n      } else {\n        await connection.send('Target.closeTarget', {\n          targetId: this.#primaryTarget._targetId\n        });\n        await this.#tabTarget._isClosedDeferred.valueOrThrow();\n      }\n    } catch (e_3) {\n      env_3.error = e_3;\n      env_3.hasError = true;\n    } finally {\n      __disposeResources(env_3);\n    }\n  }\n  isClosed() {\n    return this.#closed;\n  }\n  get mouse() {\n    return this.#mouse;\n  }\n  /**\n   * This method is typically coupled with an action that triggers a device\n   * request from an api such as WebBluetooth.\n   *\n   * :::caution\n   *\n   * This must be called before the device request is made. It will not return a\n   * currently active device prompt.\n   *\n   * :::\n   *\n   * @example\n   *\n   * ```ts\n   * const [devicePrompt] = Promise.all([\n   *   page.waitForDevicePrompt(),\n   *   page.click('#connect-bluetooth'),\n   * ]);\n   * await devicePrompt.select(\n   *   await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),\n   * );\n   * ```\n   */\n  async waitForDevicePrompt(options = {}) {\n    return await this.mainFrame().waitForDevicePrompt(options);\n  }\n}\nconst supportedMetrics = new Set(['Timestamp', 'Documents', 'Frames', 'JSEventListeners', 'Nodes', 'LayoutCount', 'RecalcStyleCount', 'LayoutDuration', 'RecalcStyleDuration', 'ScriptDuration', 'TaskDuration', 'JSHeapUsedSize', 'JSHeapTotalSize']);\n/** @see https://w3c.github.io/webdriver-bidi/#rectangle-intersection */\nfunction getIntersectionRect(clip, viewport) {\n  // Note these will already be normalized.\n  const x = Math.max(clip.x, viewport.x);\n  const y = Math.max(clip.y, viewport.y);\n  return {\n    x,\n    y,\n    width: Math.max(Math.min(clip.x + clip.width, viewport.x + viewport.width) - x, 0),\n    height: Math.max(Math.min(clip.y + clip.height, viewport.y + viewport.height) - y, 0)\n  };\n}\nexport function convertCookiesPartitionKeyFromPuppeteerToCdp(partitionKey) {\n  if (partitionKey === undefined) {\n    return undefined;\n  }\n  if (typeof partitionKey === 'string') {\n    return {\n      topLevelSite: partitionKey,\n      hasCrossSiteAncestor: false\n    };\n  }\n  return {\n    topLevelSite: partitionKey.sourceOrigin,\n    hasCrossSiteAncestor: partitionKey.hasCrossSiteAncestor ?? false\n  };\n}","map":{"version":3,"names":["firstValueFrom","from","raceWith","CDPSessionEvent","Page","ConsoleMessage","TargetCloseError","EventEmitter","FileChooser","NetworkManagerEvent","debugError","evaluationString","getReadableAsTypedArray","getReadableFromProtocolStream","parsePDFOptions","timeout","validateDialogType","assert","Deferred","AsyncDisposableStack","isErrorLike","Binding","CdpCDPSession","isTargetClosedError","Coverage","CdpDialog","EmulationManager","FrameManager","FrameManagerEvent","CdpKeyboard","CdpMouse","CdpTouchscreen","MAIN_WORLD","releaseObject","Tracing","createClientError","pageBindingInitString","valueFromRemoteObject","CdpWebWorker","convertConsoleMessageLevel","method","CdpPage","_create","client","target","defaultViewport","page","initialize","setViewport","err","closed","targetManager","primaryTargetClient","primaryTarget","tabTargetClient","tabTarget","keyboard","mouse","touchscreen","frameManager","emulationManager","tracing","bindings","Map","exposedFunctions","coverage","viewport","workers","fileChooserDeferreds","Set","sessionCloseDeferred","create","serviceWorkerBypassed","userDragInterceptionEnabled","constructor","parentSession","_targetManager","_timeoutSettings","frameManagerEmitter","on","FrameAttached","frame","emit","FrameDetached","FrameNavigated","ConsoleApiCalled","world","event","onConsoleAPI","BindingCalled","onBindingCalled","networkManagerEmitter","networkManager","Request","request","RequestServedFromCache","Response","response","RequestFailed","RequestFinished","Swapped","onActivation","bind","Ready","onSecondaryTarget","onDetachedFromTarget","_isClosedDeferred","valueOrThrow","then","off","undefined","catch","setupPrimaryTargetListeners","attachExistingTargets","#attachExistingTargets","queue","childTarget","getChildTargets","push","idx","length","next","session","_session","onAttachedToTarget","#onActivation","newSession","updateClient","swapFrameTree","#onSecondaryTarget","_subtype","registerSpeculativeSession","#setupPrimaryTargetListeners","clientEmitter","Disconnected","reject","onDialog","handleException","onTargetCrashed","emitMetrics","onLogEntryAdded","onFileChooser","sessionId","id","worker","get","delete","_getTargetInfo","type","url","_targetId","addConsoleMessage","set","#initialize","Promise","all","send","#onFileChooser","size","frameId","handle","__addDisposableResource","env_1","worlds","adoptBackendNode","backendNodeId","fileChooser","move","mode","promise","resolve","clear","_client","isServiceWorkerBypassed","isDragInterceptionEnabled","isJavaScriptEnabled","javascriptEnabled","waitForFileChooser","options","needsEnable","deferred","message","signal","addEventListener","reason","once","add","enablePromise","enabled","result","error","setGeolocation","browser","browserContext","#onTargetCrashed","Error","#onLogEntryAdded","level","text","args","source","lineNumber","entry","map","arg","mainFrame","frames","Array","values","setRequestInterception","value","setBypassServiceWorker","bypass","setDragInterception","setOfflineMode","emulateNetworkConditions","networkConditions","setDefaultNavigationTimeout","setDefaultTimeout","getDefaultTimeout","getDefaultNavigationTimeout","navigationTimeout","queryObjects","prototypeHandle","disposed","prototypeObjectId","mainRealm","createCdpHandle","objects","cookies","urls","originalCookies","unsupportedCookieAttributes","filterUnsupportedAttributes","cookie","attr","partitionKey","topLevelSite","deleteCookie","pageURL","item","convertCookiesPartitionKeyFromPuppeteerToCdp","startsWith","URL","origin","replace","port","hasCrossSiteAncestor","setCookie","startsWithHTTP","items","Object","assign","name","String","prototype","call","cookieParam","exposeFunction","pptrFunction","has","binding","default","identifier","evaluateOnNewDocument","addExposedFunctionBinding","removeExposedFunction","exposedFunctionId","removeScriptToEvaluateOnNewDocument","removeExposedFunctionBinding","authenticate","credentials","setExtraHTTPHeaders","headers","setUserAgent","userAgent","userAgentMetadata","metrics","buildMetricsObject","#emitMetrics","title","#buildMetricsObject","metric","supportedMetrics","#handleException","exception","exceptionDetails","#onConsoleAPI","stackTrace","#onBindingCalled","payload","JSON","parse","seq","isTrivial","context","run","#addConsoleMessage","eventType","listenerCount","forEach","dispose","textTokens","remoteObject","objectId","toString","stackTraceLocations","callFrame","callFrames","columnNumber","join","#onDialog","dialog","defaultPrompt","reload","waitForNavigation","ignoreSameDocumentNavigation","createCDPSession","goBack","go","goForward","#go","delta","history","entries","currentIndex","entryId","bringToFront","setJavaScriptEnabled","setBypassCSP","emulateMediaType","emulateCPUThrottling","factor","emulateMediaFeatures","features","emulateTimezone","timezoneId","emulateIdleState","overrides","emulateVisionDeficiency","needsReload","emulateViewport","pageFunction","setCacheEnabled","_screenshot","fromSurface","omitBackground","optimizeForSpeed","quality","clip","userClip","captureBeyondViewport","stack","env_2","setTransparentBackgroundColor","defer","resetDefaultBackgroundColor","isolatedRealm","evaluate","height","pageLeft","x","pageTop","y","width","window","visualViewport","getIntersectionRect","data","format","Math","round","scale","createPDFStream","ms","landscape","displayHeaderFooter","headerTemplate","footerTemplate","printBackground","paperWidth","paperHeight","margin","pageRanges","preferCSSPageSize","tagged","generateTaggedPDF","outline","generateDocumentOutline","waitForFonts","document","fonts","ready","pipe","printCommandPromise","transferMode","marginTop","top","marginBottom","bottom","marginLeft","left","marginRight","right","stream","pdf","path","readable","typedArray","close","runBeforeUnload","_guard","env_3","waitForScreenshotOperations","connection","targetId","isClosed","waitForDevicePrompt","max","min","sourceOrigin"],"sources":["/Users/goyac1/Desktop/Projects/puppeteer/node_modules/puppeteer-core/src/cdp/Page.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport {firstValueFrom, from, raceWith} from '../../third_party/rxjs/rxjs.js';\nimport type {Browser} from '../api/Browser.js';\nimport type {BrowserContext} from '../api/BrowserContext.js';\nimport {CDPSessionEvent, type CDPSession} from '../api/CDPSession.js';\nimport type {ElementHandle} from '../api/ElementHandle.js';\nimport type {Frame, WaitForOptions} from '../api/Frame.js';\nimport type {HTTPResponse} from '../api/HTTPResponse.js';\nimport type {JSHandle} from '../api/JSHandle.js';\nimport type {Credentials} from '../api/Page.js';\nimport {\n  Page,\n  PageEvent,\n  type GeolocationOptions,\n  type MediaFeature,\n  type Metrics,\n  type NewDocumentScriptEvaluation,\n  type ScreenshotClip,\n  type ScreenshotOptions,\n  type WaitTimeoutOptions,\n} from '../api/Page.js';\nimport {\n  ConsoleMessage,\n  type ConsoleMessageType,\n} from '../common/ConsoleMessage.js';\nimport type {\n  Cookie,\n  DeleteCookiesRequest,\n  CookieParam,\n  CookiePartitionKey,\n} from '../common/Cookie.js';\nimport {TargetCloseError} from '../common/Errors.js';\nimport {EventEmitter} from '../common/EventEmitter.js';\nimport {FileChooser} from '../common/FileChooser.js';\nimport {NetworkManagerEvent} from '../common/NetworkManagerEvents.js';\nimport type {PDFOptions} from '../common/PDFOptions.js';\nimport type {BindingPayload, HandleFor} from '../common/types.js';\nimport {\n  debugError,\n  evaluationString,\n  getReadableAsTypedArray,\n  getReadableFromProtocolStream,\n  parsePDFOptions,\n  timeout,\n  validateDialogType,\n} from '../common/util.js';\nimport type {Viewport} from '../common/Viewport.js';\nimport {assert} from '../util/assert.js';\nimport {Deferred} from '../util/Deferred.js';\nimport {AsyncDisposableStack} from '../util/disposable.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\n\nimport {Binding} from './Binding.js';\nimport {CdpCDPSession} from './CdpSession.js';\nimport {isTargetClosedError} from './Connection.js';\nimport {Coverage} from './Coverage.js';\nimport type {DeviceRequestPrompt} from './DeviceRequestPrompt.js';\nimport {CdpDialog} from './Dialog.js';\nimport {EmulationManager} from './EmulationManager.js';\nimport type {CdpFrame} from './Frame.js';\nimport {FrameManager} from './FrameManager.js';\nimport {FrameManagerEvent} from './FrameManagerEvents.js';\nimport {CdpKeyboard, CdpMouse, CdpTouchscreen} from './Input.js';\nimport type {IsolatedWorld} from './IsolatedWorld.js';\nimport {MAIN_WORLD} from './IsolatedWorlds.js';\nimport {releaseObject} from './JSHandle.js';\nimport type {NetworkConditions} from './NetworkManager.js';\nimport type {CdpTarget} from './Target.js';\nimport {TargetManagerEvent} from './TargetManageEvents.js';\nimport type {TargetManager} from './TargetManager.js';\nimport {Tracing} from './Tracing.js';\nimport {\n  createClientError,\n  pageBindingInitString,\n  valueFromRemoteObject,\n} from './utils.js';\nimport {CdpWebWorker} from './WebWorker.js';\n\nfunction convertConsoleMessageLevel(method: string): ConsoleMessageType {\n  switch (method) {\n    case 'warning':\n      return 'warn';\n    default:\n      return method as ConsoleMessageType;\n  }\n}\n\n/**\n * @internal\n */\nexport class CdpPage extends Page {\n  static async _create(\n    client: CdpCDPSession,\n    target: CdpTarget,\n    defaultViewport: Viewport | null,\n  ): Promise<CdpPage> {\n    const page = new CdpPage(client, target);\n    await page.#initialize();\n    if (defaultViewport) {\n      try {\n        await page.setViewport(defaultViewport);\n      } catch (err) {\n        if (isErrorLike(err) && isTargetClosedError(err)) {\n          debugError(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n    return page;\n  }\n\n  #closed = false;\n  readonly #targetManager: TargetManager;\n\n  #primaryTargetClient: CdpCDPSession;\n  #primaryTarget: CdpTarget;\n  #tabTargetClient: CDPSession;\n  #tabTarget: CdpTarget;\n  #keyboard: CdpKeyboard;\n  #mouse: CdpMouse;\n  #touchscreen: CdpTouchscreen;\n  #frameManager: FrameManager;\n  #emulationManager: EmulationManager;\n  #tracing: Tracing;\n  #bindings = new Map<string, Binding>();\n  #exposedFunctions = new Map<string, string>();\n  #coverage: Coverage;\n  #viewport: Viewport | null;\n  #workers = new Map<string, CdpWebWorker>();\n  #fileChooserDeferreds = new Set<Deferred<FileChooser>>();\n  #sessionCloseDeferred = Deferred.create<never, TargetCloseError>();\n  #serviceWorkerBypassed = false;\n  #userDragInterceptionEnabled = false;\n\n  constructor(client: CdpCDPSession, target: CdpTarget) {\n    super();\n    this.#primaryTargetClient = client;\n    this.#tabTargetClient = client.parentSession()!;\n    assert(this.#tabTargetClient, 'Tab target session is not defined.');\n    this.#tabTarget = (this.#tabTargetClient as CdpCDPSession).target();\n    assert(this.#tabTarget, 'Tab target is not defined.');\n    this.#primaryTarget = target;\n    this.#targetManager = target._targetManager();\n    this.#keyboard = new CdpKeyboard(client);\n    this.#mouse = new CdpMouse(client, this.#keyboard);\n    this.#touchscreen = new CdpTouchscreen(client, this.#keyboard);\n    this.#frameManager = new FrameManager(client, this, this._timeoutSettings);\n    this.#emulationManager = new EmulationManager(client);\n    this.#tracing = new Tracing(client);\n    this.#coverage = new Coverage(client);\n    this.#viewport = null;\n\n    const frameManagerEmitter = new EventEmitter(this.#frameManager);\n    frameManagerEmitter.on(FrameManagerEvent.FrameAttached, frame => {\n      this.emit(PageEvent.FrameAttached, frame);\n    });\n    frameManagerEmitter.on(FrameManagerEvent.FrameDetached, frame => {\n      this.emit(PageEvent.FrameDetached, frame);\n    });\n    frameManagerEmitter.on(FrameManagerEvent.FrameNavigated, frame => {\n      this.emit(PageEvent.FrameNavigated, frame);\n    });\n    frameManagerEmitter.on(\n      FrameManagerEvent.ConsoleApiCalled,\n      ([world, event]) => {\n        this.#onConsoleAPI(world, event);\n      },\n    );\n    frameManagerEmitter.on(\n      FrameManagerEvent.BindingCalled,\n      ([world, event]) => {\n        void this.#onBindingCalled(world, event);\n      },\n    );\n\n    const networkManagerEmitter = new EventEmitter(\n      this.#frameManager.networkManager,\n    );\n    networkManagerEmitter.on(NetworkManagerEvent.Request, request => {\n      this.emit(PageEvent.Request, request);\n    });\n    networkManagerEmitter.on(\n      NetworkManagerEvent.RequestServedFromCache,\n      request => {\n        this.emit(PageEvent.RequestServedFromCache, request!);\n      },\n    );\n    networkManagerEmitter.on(NetworkManagerEvent.Response, response => {\n      this.emit(PageEvent.Response, response);\n    });\n    networkManagerEmitter.on(NetworkManagerEvent.RequestFailed, request => {\n      this.emit(PageEvent.RequestFailed, request);\n    });\n    networkManagerEmitter.on(NetworkManagerEvent.RequestFinished, request => {\n      this.emit(PageEvent.RequestFinished, request);\n    });\n\n    this.#tabTargetClient.on(\n      CDPSessionEvent.Swapped,\n      this.#onActivation.bind(this),\n    );\n\n    this.#tabTargetClient.on(\n      CDPSessionEvent.Ready,\n      this.#onSecondaryTarget.bind(this),\n    );\n\n    this.#targetManager.on(\n      TargetManagerEvent.TargetGone,\n      this.#onDetachedFromTarget,\n    );\n\n    this.#tabTarget._isClosedDeferred\n      .valueOrThrow()\n      .then(() => {\n        this.#targetManager.off(\n          TargetManagerEvent.TargetGone,\n          this.#onDetachedFromTarget,\n        );\n\n        this.emit(PageEvent.Close, undefined);\n        this.#closed = true;\n      })\n      .catch(debugError);\n\n    this.#setupPrimaryTargetListeners();\n    this.#attachExistingTargets();\n  }\n\n  #attachExistingTargets(): void {\n    const queue = [];\n    for (const childTarget of this.#targetManager.getChildTargets(\n      this.#primaryTarget,\n    )) {\n      queue.push(childTarget);\n    }\n    let idx = 0;\n    while (idx < queue.length) {\n      const next = queue[idx] as CdpTarget;\n      idx++;\n      const session = next._session();\n      if (session) {\n        this.#onAttachedToTarget(session);\n      }\n      for (const childTarget of this.#targetManager.getChildTargets(next)) {\n        queue.push(childTarget);\n      }\n    }\n  }\n\n  async #onActivation(newSession: CDPSession): Promise<void> {\n    // TODO: Remove assert once we have separate Event type for CdpCDPSession.\n    assert(\n      newSession instanceof CdpCDPSession,\n      'CDPSession is not instance of CdpCDPSession',\n    );\n    this.#primaryTargetClient = newSession;\n    this.#primaryTarget = newSession.target();\n    assert(this.#primaryTarget, 'Missing target on swap');\n    this.#keyboard.updateClient(newSession);\n    this.#mouse.updateClient(newSession);\n    this.#touchscreen.updateClient(newSession);\n    this.#emulationManager.updateClient(newSession);\n    this.#tracing.updateClient(newSession);\n    this.#coverage.updateClient(newSession);\n    await this.#frameManager.swapFrameTree(newSession);\n    this.#setupPrimaryTargetListeners();\n  }\n\n  async #onSecondaryTarget(session: CDPSession): Promise<void> {\n    assert(session instanceof CdpCDPSession);\n    if (session.target()._subtype() !== 'prerender') {\n      return;\n    }\n    this.#frameManager.registerSpeculativeSession(session).catch(debugError);\n    this.#emulationManager\n      .registerSpeculativeSession(session)\n      .catch(debugError);\n  }\n\n  /**\n   * Sets up listeners for the primary target. The primary target can change\n   * during a navigation to a prerended page.\n   */\n  #setupPrimaryTargetListeners() {\n    const clientEmitter = new EventEmitter(this.#primaryTargetClient);\n    clientEmitter.on(CDPSessionEvent.Ready, this.#onAttachedToTarget);\n    clientEmitter.on(CDPSessionEvent.Disconnected, () => {\n      this.#sessionCloseDeferred.reject(new TargetCloseError('Target closed'));\n    });\n    clientEmitter.on('Page.domContentEventFired', () => {\n      this.emit(PageEvent.DOMContentLoaded, undefined);\n    });\n    clientEmitter.on('Page.loadEventFired', () => {\n      this.emit(PageEvent.Load, undefined);\n    });\n    clientEmitter.on('Page.javascriptDialogOpening', this.#onDialog.bind(this));\n    clientEmitter.on(\n      'Runtime.exceptionThrown',\n      this.#handleException.bind(this),\n    );\n    clientEmitter.on(\n      'Inspector.targetCrashed',\n      this.#onTargetCrashed.bind(this),\n    );\n    clientEmitter.on('Performance.metrics', this.#emitMetrics.bind(this));\n    clientEmitter.on('Log.entryAdded', this.#onLogEntryAdded.bind(this));\n    clientEmitter.on('Page.fileChooserOpened', this.#onFileChooser.bind(this));\n  }\n\n  #onDetachedFromTarget = (target: CdpTarget) => {\n    const sessionId = target._session()?.id();\n    const worker = this.#workers.get(sessionId!);\n    if (!worker) {\n      return;\n    }\n    this.#workers.delete(sessionId!);\n    this.emit(PageEvent.WorkerDestroyed, worker);\n  };\n\n  #onAttachedToTarget = (session: CDPSession) => {\n    assert(session instanceof CdpCDPSession);\n    this.#frameManager.onAttachedToTarget(session.target());\n    if (session.target()._getTargetInfo().type === 'worker') {\n      const worker = new CdpWebWorker(\n        session,\n        session.target().url(),\n        session.target()._targetId,\n        session.target().type(),\n        this.#addConsoleMessage.bind(this),\n        this.#handleException.bind(this),\n        this.#frameManager.networkManager,\n      );\n      this.#workers.set(session.id(), worker);\n      this.emit(PageEvent.WorkerCreated, worker);\n    }\n    session.on(CDPSessionEvent.Ready, this.#onAttachedToTarget);\n  };\n\n  async #initialize(): Promise<void> {\n    try {\n      await Promise.all([\n        this.#frameManager.initialize(this.#primaryTargetClient),\n        this.#primaryTargetClient.send('Performance.enable'),\n        this.#primaryTargetClient.send('Log.enable'),\n      ]);\n    } catch (err) {\n      if (isErrorLike(err) && isTargetClosedError(err)) {\n        debugError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  async #onFileChooser(\n    event: Protocol.Page.FileChooserOpenedEvent,\n  ): Promise<void> {\n    if (!this.#fileChooserDeferreds.size) {\n      return;\n    }\n\n    const frame = this.#frameManager.frame(event.frameId);\n    assert(frame, 'This should never happen.');\n\n    // This is guaranteed to be an HTMLInputElement handle by the event.\n    using handle = (await frame.worlds[MAIN_WORLD].adoptBackendNode(\n      event.backendNodeId,\n    )) as ElementHandle<HTMLInputElement>;\n\n    const fileChooser = new FileChooser(\n      handle.move(),\n      event.mode !== 'selectSingle',\n    );\n    for (const promise of this.#fileChooserDeferreds) {\n      promise.resolve(fileChooser);\n    }\n    this.#fileChooserDeferreds.clear();\n  }\n\n  _client(): CDPSession {\n    return this.#primaryTargetClient;\n  }\n\n  override isServiceWorkerBypassed(): boolean {\n    return this.#serviceWorkerBypassed;\n  }\n\n  override isDragInterceptionEnabled(): boolean {\n    return this.#userDragInterceptionEnabled;\n  }\n\n  override isJavaScriptEnabled(): boolean {\n    return this.#emulationManager.javascriptEnabled;\n  }\n\n  override async waitForFileChooser(\n    options: WaitTimeoutOptions = {},\n  ): Promise<FileChooser> {\n    const needsEnable = this.#fileChooserDeferreds.size === 0;\n    const {timeout = this._timeoutSettings.timeout()} = options;\n    const deferred = Deferred.create<FileChooser>({\n      message: `Waiting for \\`FileChooser\\` failed: ${timeout}ms exceeded`,\n      timeout,\n    });\n\n    if (options.signal) {\n      options.signal.addEventListener(\n        'abort',\n        () => {\n          deferred.reject(options.signal?.reason);\n        },\n        {once: true},\n      );\n    }\n\n    this.#fileChooserDeferreds.add(deferred);\n    let enablePromise: Promise<void> | undefined;\n    if (needsEnable) {\n      enablePromise = this.#primaryTargetClient.send(\n        'Page.setInterceptFileChooserDialog',\n        {\n          enabled: true,\n        },\n      );\n    }\n    try {\n      const [result] = await Promise.all([\n        deferred.valueOrThrow(),\n        enablePromise,\n      ]);\n      return result;\n    } catch (error) {\n      this.#fileChooserDeferreds.delete(deferred);\n      throw error;\n    }\n  }\n\n  override async setGeolocation(options: GeolocationOptions): Promise<void> {\n    return await this.#emulationManager.setGeolocation(options);\n  }\n\n  override target(): CdpTarget {\n    return this.#primaryTarget;\n  }\n\n  override browser(): Browser {\n    return this.#primaryTarget.browser();\n  }\n\n  override browserContext(): BrowserContext {\n    return this.#primaryTarget.browserContext();\n  }\n\n  #onTargetCrashed(): void {\n    this.emit(PageEvent.Error, new Error('Page crashed!'));\n  }\n\n  #onLogEntryAdded(event: Protocol.Log.EntryAddedEvent): void {\n    const {level, text, args, source, url, lineNumber} = event.entry;\n    if (args) {\n      args.map(arg => {\n        void releaseObject(this.#primaryTargetClient, arg);\n      });\n    }\n    if (source !== 'worker') {\n      this.emit(\n        PageEvent.Console,\n        new ConsoleMessage(\n          convertConsoleMessageLevel(level),\n          text,\n          [],\n          [{url, lineNumber}],\n        ),\n      );\n    }\n  }\n\n  override mainFrame(): CdpFrame {\n    return this.#frameManager.mainFrame();\n  }\n\n  override get keyboard(): CdpKeyboard {\n    return this.#keyboard;\n  }\n\n  override get touchscreen(): CdpTouchscreen {\n    return this.#touchscreen;\n  }\n\n  override get coverage(): Coverage {\n    return this.#coverage;\n  }\n\n  override get tracing(): Tracing {\n    return this.#tracing;\n  }\n\n  override frames(): Frame[] {\n    return this.#frameManager.frames();\n  }\n\n  override workers(): CdpWebWorker[] {\n    return Array.from(this.#workers.values());\n  }\n\n  override async setRequestInterception(value: boolean): Promise<void> {\n    return await this.#frameManager.networkManager.setRequestInterception(\n      value,\n    );\n  }\n\n  override async setBypassServiceWorker(bypass: boolean): Promise<void> {\n    this.#serviceWorkerBypassed = bypass;\n    return await this.#primaryTargetClient.send(\n      'Network.setBypassServiceWorker',\n      {bypass},\n    );\n  }\n\n  override async setDragInterception(enabled: boolean): Promise<void> {\n    this.#userDragInterceptionEnabled = enabled;\n    return await this.#primaryTargetClient.send('Input.setInterceptDrags', {\n      enabled,\n    });\n  }\n\n  override async setOfflineMode(enabled: boolean): Promise<void> {\n    return await this.#frameManager.networkManager.setOfflineMode(enabled);\n  }\n\n  override async emulateNetworkConditions(\n    networkConditions: NetworkConditions | null,\n  ): Promise<void> {\n    return await this.#frameManager.networkManager.emulateNetworkConditions(\n      networkConditions,\n    );\n  }\n\n  override setDefaultNavigationTimeout(timeout: number): void {\n    this._timeoutSettings.setDefaultNavigationTimeout(timeout);\n  }\n\n  override setDefaultTimeout(timeout: number): void {\n    this._timeoutSettings.setDefaultTimeout(timeout);\n  }\n\n  override getDefaultTimeout(): number {\n    return this._timeoutSettings.timeout();\n  }\n\n  override getDefaultNavigationTimeout(): number {\n    return this._timeoutSettings.navigationTimeout();\n  }\n\n  override async queryObjects<Prototype>(\n    prototypeHandle: JSHandle<Prototype>,\n  ): Promise<JSHandle<Prototype[]>> {\n    assert(!prototypeHandle.disposed, 'Prototype JSHandle is disposed!');\n    assert(\n      prototypeHandle.id,\n      'Prototype JSHandle must not be referencing primitive value',\n    );\n    const response = await this.mainFrame().client.send(\n      'Runtime.queryObjects',\n      {\n        prototypeObjectId: prototypeHandle.id,\n      },\n    );\n    return this.mainFrame()\n      .mainRealm()\n      .createCdpHandle(response.objects) as HandleFor<Prototype[]>;\n  }\n\n  override async cookies(...urls: string[]): Promise<Cookie[]> {\n    const originalCookies = (\n      await this.#primaryTargetClient.send('Network.getCookies', {\n        urls: urls.length ? urls : [this.url()],\n      })\n    ).cookies;\n\n    const unsupportedCookieAttributes = ['sourcePort'];\n    const filterUnsupportedAttributes = (\n      cookie: Protocol.Network.Cookie,\n    ): Protocol.Network.Cookie => {\n      for (const attr of unsupportedCookieAttributes) {\n        delete (cookie as unknown as Record<string, unknown>)[attr];\n      }\n      return cookie;\n    };\n    return originalCookies.map(filterUnsupportedAttributes).map(cookie => {\n      return {\n        ...cookie,\n        // TODO: a breaking change is needed in Puppeteer types to support other\n        // partition keys.\n        partitionKey: cookie.partitionKey\n          ? cookie.partitionKey.topLevelSite\n          : undefined,\n      };\n    });\n  }\n\n  override async deleteCookie(\n    ...cookies: DeleteCookiesRequest[]\n  ): Promise<void> {\n    const pageURL = this.url();\n    for (const cookie of cookies) {\n      const item = {\n        ...cookie,\n        partitionKey: convertCookiesPartitionKeyFromPuppeteerToCdp(\n          cookie.partitionKey,\n        ),\n      };\n      if (!cookie.url && pageURL.startsWith('http')) {\n        item.url = pageURL;\n      }\n      await this.#primaryTargetClient.send('Network.deleteCookies', item);\n      if (pageURL.startsWith('http') && !item.partitionKey) {\n        const url = new URL(pageURL);\n        // Delete also cookies from the page's partition.\n        await this.#primaryTargetClient.send('Network.deleteCookies', {\n          ...item,\n          partitionKey: {\n            topLevelSite: url.origin.replace(`:${url.port}`, ''),\n            hasCrossSiteAncestor: false,\n          },\n        });\n      }\n    }\n  }\n\n  override async setCookie(...cookies: CookieParam[]): Promise<void> {\n    const pageURL = this.url();\n    const startsWithHTTP = pageURL.startsWith('http');\n    const items = cookies.map(cookie => {\n      const item = Object.assign({}, cookie);\n      if (!item.url && startsWithHTTP) {\n        item.url = pageURL;\n      }\n      assert(\n        item.url !== 'about:blank',\n        `Blank page can not have cookie \"${item.name}\"`,\n      );\n      assert(\n        !String.prototype.startsWith.call(item.url || '', 'data:'),\n        `Data URL page can not have cookie \"${item.name}\"`,\n      );\n      return item;\n    });\n    await this.deleteCookie(...items);\n    if (items.length) {\n      await this.#primaryTargetClient.send('Network.setCookies', {\n        cookies: items.map(cookieParam => {\n          return {\n            ...cookieParam,\n            partitionKey: convertCookiesPartitionKeyFromPuppeteerToCdp(\n              cookieParam.partitionKey,\n            ),\n          };\n        }),\n      });\n    }\n  }\n\n  override async exposeFunction(\n    name: string,\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    pptrFunction: Function | {default: Function},\n  ): Promise<void> {\n    if (this.#bindings.has(name)) {\n      throw new Error(\n        `Failed to add page binding with name ${name}: window['${name}'] already exists!`,\n      );\n    }\n    const source = pageBindingInitString('exposedFun', name);\n    let binding: Binding;\n    switch (typeof pptrFunction) {\n      case 'function':\n        binding = new Binding(\n          name,\n          pptrFunction as (...args: unknown[]) => unknown,\n          source,\n        );\n        break;\n      default:\n        binding = new Binding(\n          name,\n          pptrFunction.default as (...args: unknown[]) => unknown,\n          source,\n        );\n        break;\n    }\n    this.#bindings.set(name, binding);\n    const [{identifier}] = await Promise.all([\n      this.#frameManager.evaluateOnNewDocument(source),\n      this.#frameManager.addExposedFunctionBinding(binding),\n    ]);\n    this.#exposedFunctions.set(name, identifier);\n  }\n\n  override async removeExposedFunction(name: string): Promise<void> {\n    const exposedFunctionId = this.#exposedFunctions.get(name);\n    if (!exposedFunctionId) {\n      throw new Error(`Function with name \"${name}\" does not exist`);\n    }\n    // #bindings must be updated together with #exposedFunctions.\n    const binding = this.#bindings.get(name)!;\n    this.#exposedFunctions.delete(name);\n    this.#bindings.delete(name);\n    await Promise.all([\n      this.#frameManager.removeScriptToEvaluateOnNewDocument(exposedFunctionId),\n      this.#frameManager.removeExposedFunctionBinding(binding),\n    ]);\n  }\n\n  override async authenticate(credentials: Credentials | null): Promise<void> {\n    return await this.#frameManager.networkManager.authenticate(credentials);\n  }\n\n  override async setExtraHTTPHeaders(\n    headers: Record<string, string>,\n  ): Promise<void> {\n    return await this.#frameManager.networkManager.setExtraHTTPHeaders(headers);\n  }\n\n  override async setUserAgent(\n    userAgent: string,\n    userAgentMetadata?: Protocol.Emulation.UserAgentMetadata,\n  ): Promise<void> {\n    return await this.#frameManager.networkManager.setUserAgent(\n      userAgent,\n      userAgentMetadata,\n    );\n  }\n\n  override async metrics(): Promise<Metrics> {\n    const response = await this.#primaryTargetClient.send(\n      'Performance.getMetrics',\n    );\n    return this.#buildMetricsObject(response.metrics);\n  }\n\n  #emitMetrics(event: Protocol.Performance.MetricsEvent): void {\n    this.emit(PageEvent.Metrics, {\n      title: event.title,\n      metrics: this.#buildMetricsObject(event.metrics),\n    });\n  }\n\n  #buildMetricsObject(metrics?: Protocol.Performance.Metric[]): Metrics {\n    const result: Record<\n      Protocol.Performance.Metric['name'],\n      Protocol.Performance.Metric['value']\n    > = {};\n    for (const metric of metrics || []) {\n      if (supportedMetrics.has(metric.name)) {\n        result[metric.name] = metric.value;\n      }\n    }\n    return result;\n  }\n\n  #handleException(exception: Protocol.Runtime.ExceptionThrownEvent): void {\n    this.emit(\n      PageEvent.PageError,\n      createClientError(exception.exceptionDetails),\n    );\n  }\n\n  #onConsoleAPI(\n    world: IsolatedWorld,\n    event: Protocol.Runtime.ConsoleAPICalledEvent,\n  ): void {\n    const values = event.args.map(arg => {\n      return world.createCdpHandle(arg);\n    });\n    this.#addConsoleMessage(\n      convertConsoleMessageLevel(event.type),\n      values,\n      event.stackTrace,\n    );\n  }\n\n  async #onBindingCalled(\n    world: IsolatedWorld,\n    event: Protocol.Runtime.BindingCalledEvent,\n  ): Promise<void> {\n    let payload: BindingPayload;\n    try {\n      payload = JSON.parse(event.payload);\n    } catch {\n      // The binding was either called by something in the page or it was\n      // called before our wrapper was initialized.\n      return;\n    }\n    const {type, name, seq, args, isTrivial} = payload;\n    if (type !== 'exposedFun') {\n      return;\n    }\n\n    const context = world.context;\n    if (!context) {\n      return;\n    }\n\n    const binding = this.#bindings.get(name);\n    await binding?.run(context, seq, args, isTrivial);\n  }\n\n  #addConsoleMessage(\n    eventType: string,\n    args: JSHandle[],\n    stackTrace?: Protocol.Runtime.StackTrace,\n  ): void {\n    if (!this.listenerCount(PageEvent.Console)) {\n      args.forEach(arg => {\n        return arg.dispose();\n      });\n      return;\n    }\n    const textTokens = [];\n    // eslint-disable-next-line max-len -- The comment is long.\n    // eslint-disable-next-line rulesdir/use-using -- These are not owned by this function.\n    for (const arg of args) {\n      const remoteObject = arg.remoteObject();\n      if (remoteObject.objectId) {\n        textTokens.push(arg.toString());\n      } else {\n        textTokens.push(valueFromRemoteObject(remoteObject));\n      }\n    }\n    const stackTraceLocations = [];\n    if (stackTrace) {\n      for (const callFrame of stackTrace.callFrames) {\n        stackTraceLocations.push({\n          url: callFrame.url,\n          lineNumber: callFrame.lineNumber,\n          columnNumber: callFrame.columnNumber,\n        });\n      }\n    }\n    const message = new ConsoleMessage(\n      convertConsoleMessageLevel(eventType),\n      textTokens.join(' '),\n      args,\n      stackTraceLocations,\n    );\n    this.emit(PageEvent.Console, message);\n  }\n\n  #onDialog(event: Protocol.Page.JavascriptDialogOpeningEvent): void {\n    const type = validateDialogType(event.type);\n    const dialog = new CdpDialog(\n      this.#primaryTargetClient,\n      type,\n      event.message,\n      event.defaultPrompt,\n    );\n    this.emit(PageEvent.Dialog, dialog);\n  }\n\n  override async reload(\n    options?: WaitForOptions,\n  ): Promise<HTTPResponse | null> {\n    const [result] = await Promise.all([\n      this.waitForNavigation({\n        ...options,\n        ignoreSameDocumentNavigation: true,\n      }),\n      this.#primaryTargetClient.send('Page.reload'),\n    ]);\n\n    return result;\n  }\n\n  override async createCDPSession(): Promise<CDPSession> {\n    return await this.target().createCDPSession();\n  }\n\n  override async goBack(\n    options: WaitForOptions = {},\n  ): Promise<HTTPResponse | null> {\n    return await this.#go(-1, options);\n  }\n\n  override async goForward(\n    options: WaitForOptions = {},\n  ): Promise<HTTPResponse | null> {\n    return await this.#go(+1, options);\n  }\n\n  async #go(\n    delta: number,\n    options: WaitForOptions,\n  ): Promise<HTTPResponse | null> {\n    const history = await this.#primaryTargetClient.send(\n      'Page.getNavigationHistory',\n    );\n    const entry = history.entries[history.currentIndex + delta];\n    if (!entry) {\n      return null;\n    }\n    const result = await Promise.all([\n      this.waitForNavigation(options),\n      this.#primaryTargetClient.send('Page.navigateToHistoryEntry', {\n        entryId: entry.id,\n      }),\n    ]);\n    return result[0];\n  }\n\n  override async bringToFront(): Promise<void> {\n    await this.#primaryTargetClient.send('Page.bringToFront');\n  }\n\n  override async setJavaScriptEnabled(enabled: boolean): Promise<void> {\n    return await this.#emulationManager.setJavaScriptEnabled(enabled);\n  }\n\n  override async setBypassCSP(enabled: boolean): Promise<void> {\n    await this.#primaryTargetClient.send('Page.setBypassCSP', {enabled});\n  }\n\n  override async emulateMediaType(type?: string): Promise<void> {\n    return await this.#emulationManager.emulateMediaType(type);\n  }\n\n  override async emulateCPUThrottling(factor: number | null): Promise<void> {\n    return await this.#emulationManager.emulateCPUThrottling(factor);\n  }\n\n  override async emulateMediaFeatures(\n    features?: MediaFeature[],\n  ): Promise<void> {\n    return await this.#emulationManager.emulateMediaFeatures(features);\n  }\n\n  override async emulateTimezone(timezoneId?: string): Promise<void> {\n    return await this.#emulationManager.emulateTimezone(timezoneId);\n  }\n\n  override async emulateIdleState(overrides?: {\n    isUserActive: boolean;\n    isScreenUnlocked: boolean;\n  }): Promise<void> {\n    return await this.#emulationManager.emulateIdleState(overrides);\n  }\n\n  override async emulateVisionDeficiency(\n    type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type'],\n  ): Promise<void> {\n    return await this.#emulationManager.emulateVisionDeficiency(type);\n  }\n\n  override async setViewport(viewport: Viewport | null): Promise<void> {\n    const needsReload = await this.#emulationManager.emulateViewport(viewport);\n    this.#viewport = viewport;\n    if (needsReload) {\n      await this.reload();\n    }\n  }\n\n  override viewport(): Viewport | null {\n    return this.#viewport;\n  }\n\n  override async evaluateOnNewDocument<\n    Params extends unknown[],\n    Func extends (...args: Params) => unknown = (...args: Params) => unknown,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<NewDocumentScriptEvaluation> {\n    const source = evaluationString(pageFunction, ...args);\n    return await this.#frameManager.evaluateOnNewDocument(source);\n  }\n\n  override async removeScriptToEvaluateOnNewDocument(\n    identifier: string,\n  ): Promise<void> {\n    return await this.#frameManager.removeScriptToEvaluateOnNewDocument(\n      identifier,\n    );\n  }\n\n  override async setCacheEnabled(enabled = true): Promise<void> {\n    await this.#frameManager.networkManager.setCacheEnabled(enabled);\n  }\n\n  override async _screenshot(\n    options: Readonly<ScreenshotOptions>,\n  ): Promise<string> {\n    const {\n      fromSurface,\n      omitBackground,\n      optimizeForSpeed,\n      quality,\n      clip: userClip,\n      type,\n      captureBeyondViewport,\n    } = options;\n\n    await using stack = new AsyncDisposableStack();\n    if (omitBackground && (type === 'png' || type === 'webp')) {\n      await this.#emulationManager.setTransparentBackgroundColor();\n      stack.defer(async () => {\n        await this.#emulationManager\n          .resetDefaultBackgroundColor()\n          .catch(debugError);\n      });\n    }\n\n    let clip = userClip;\n    if (clip && !captureBeyondViewport) {\n      const viewport = await this.mainFrame()\n        .isolatedRealm()\n        .evaluate(() => {\n          const {\n            height,\n            pageLeft: x,\n            pageTop: y,\n            width,\n          } = window.visualViewport!;\n          return {x, y, height, width};\n        });\n      clip = getIntersectionRect(clip, viewport);\n    }\n\n    const {data} = await this.#primaryTargetClient.send(\n      'Page.captureScreenshot',\n      {\n        format: type,\n        optimizeForSpeed,\n        fromSurface,\n        ...(quality !== undefined ? {quality: Math.round(quality)} : {}),\n        ...(clip ? {clip: {...clip, scale: clip.scale ?? 1}} : {}),\n        captureBeyondViewport,\n      },\n    );\n    return data;\n  }\n\n  override async createPDFStream(\n    options: PDFOptions = {},\n  ): Promise<ReadableStream<Uint8Array>> {\n    const {timeout: ms = this._timeoutSettings.timeout()} = options;\n    const {\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      width: paperWidth,\n      height: paperHeight,\n      margin,\n      pageRanges,\n      preferCSSPageSize,\n      omitBackground,\n      tagged: generateTaggedPDF,\n      outline: generateDocumentOutline,\n      waitForFonts,\n    } = parsePDFOptions(options);\n\n    if (omitBackground) {\n      await this.#emulationManager.setTransparentBackgroundColor();\n    }\n\n    if (waitForFonts) {\n      await firstValueFrom(\n        from(\n          this.mainFrame()\n            .isolatedRealm()\n            .evaluate(() => {\n              return document.fonts.ready;\n            }),\n        ).pipe(raceWith(timeout(ms))),\n      );\n    }\n\n    const printCommandPromise = this.#primaryTargetClient.send(\n      'Page.printToPDF',\n      {\n        transferMode: 'ReturnAsStream',\n        landscape,\n        displayHeaderFooter,\n        headerTemplate,\n        footerTemplate,\n        printBackground,\n        scale,\n        paperWidth,\n        paperHeight,\n        marginTop: margin.top,\n        marginBottom: margin.bottom,\n        marginLeft: margin.left,\n        marginRight: margin.right,\n        pageRanges,\n        preferCSSPageSize,\n        generateTaggedPDF,\n        generateDocumentOutline,\n      },\n    );\n\n    const result = await firstValueFrom(\n      from(printCommandPromise).pipe(raceWith(timeout(ms))),\n    );\n\n    if (omitBackground) {\n      await this.#emulationManager.resetDefaultBackgroundColor();\n    }\n\n    assert(result.stream, '`stream` is missing from `Page.printToPDF');\n    return await getReadableFromProtocolStream(\n      this.#primaryTargetClient,\n      result.stream,\n    );\n  }\n\n  override async pdf(options: PDFOptions = {}): Promise<Uint8Array> {\n    const {path = undefined} = options;\n    const readable = await this.createPDFStream(options);\n    const typedArray = await getReadableAsTypedArray(readable, path);\n    assert(typedArray, 'Could not create typed array');\n    return typedArray;\n  }\n\n  override async close(\n    options: {runBeforeUnload?: boolean} = {runBeforeUnload: undefined},\n  ): Promise<void> {\n    using _guard = await this.browserContext().waitForScreenshotOperations();\n    const connection = this.#primaryTargetClient.connection();\n    assert(\n      connection,\n      'Protocol error: Connection closed. Most likely the page has been closed.',\n    );\n    const runBeforeUnload = !!options.runBeforeUnload;\n    if (runBeforeUnload) {\n      await this.#primaryTargetClient.send('Page.close');\n    } else {\n      await connection.send('Target.closeTarget', {\n        targetId: this.#primaryTarget._targetId,\n      });\n      await this.#tabTarget._isClosedDeferred.valueOrThrow();\n    }\n  }\n\n  override isClosed(): boolean {\n    return this.#closed;\n  }\n\n  override get mouse(): CdpMouse {\n    return this.#mouse;\n  }\n\n  /**\n   * This method is typically coupled with an action that triggers a device\n   * request from an api such as WebBluetooth.\n   *\n   * :::caution\n   *\n   * This must be called before the device request is made. It will not return a\n   * currently active device prompt.\n   *\n   * :::\n   *\n   * @example\n   *\n   * ```ts\n   * const [devicePrompt] = Promise.all([\n   *   page.waitForDevicePrompt(),\n   *   page.click('#connect-bluetooth'),\n   * ]);\n   * await devicePrompt.select(\n   *   await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),\n   * );\n   * ```\n   */\n  override async waitForDevicePrompt(\n    options: WaitTimeoutOptions = {},\n  ): Promise<DeviceRequestPrompt> {\n    return await this.mainFrame().waitForDevicePrompt(options);\n  }\n}\n\nconst supportedMetrics = new Set<string>([\n  'Timestamp',\n  'Documents',\n  'Frames',\n  'JSEventListeners',\n  'Nodes',\n  'LayoutCount',\n  'RecalcStyleCount',\n  'LayoutDuration',\n  'RecalcStyleDuration',\n  'ScriptDuration',\n  'TaskDuration',\n  'JSHeapUsedSize',\n  'JSHeapTotalSize',\n]);\n\n/** @see https://w3c.github.io/webdriver-bidi/#rectangle-intersection */\nfunction getIntersectionRect(\n  clip: Readonly<ScreenshotClip>,\n  viewport: Readonly<Protocol.DOM.Rect>,\n): ScreenshotClip {\n  // Note these will already be normalized.\n  const x = Math.max(clip.x, viewport.x);\n  const y = Math.max(clip.y, viewport.y);\n  return {\n    x,\n    y,\n    width: Math.max(\n      Math.min(clip.x + clip.width, viewport.x + viewport.width) - x,\n      0,\n    ),\n    height: Math.max(\n      Math.min(clip.y + clip.height, viewport.y + viewport.height) - y,\n      0,\n    ),\n  };\n}\n\nexport function convertCookiesPartitionKeyFromPuppeteerToCdp(\n  partitionKey: CookiePartitionKey | string | undefined,\n): Protocol.Network.CookiePartitionKey | undefined {\n  if (partitionKey === undefined) {\n    return undefined;\n  }\n  if (typeof partitionKey === 'string') {\n    return {\n      topLevelSite: partitionKey,\n      hasCrossSiteAncestor: false,\n    };\n  }\n  return {\n    topLevelSite: partitionKey.sourceOrigin,\n    hasCrossSiteAncestor: partitionKey.hasCrossSiteAncestor ?? false,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}