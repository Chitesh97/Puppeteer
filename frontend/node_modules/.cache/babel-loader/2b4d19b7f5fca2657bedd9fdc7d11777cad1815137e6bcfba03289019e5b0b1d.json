{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport os from 'node:os';\nimport { BrowserPlatform } from './browser-data/browser-data.js';\n/**\n * @public\n */\nexport function detectBrowserPlatform() {\n  const platform = os.platform();\n  const arch = os.arch();\n  switch (platform) {\n    case 'darwin':\n      return arch === 'arm64' ? BrowserPlatform.MAC_ARM : BrowserPlatform.MAC;\n    case 'linux':\n      return arch === 'arm64' ? BrowserPlatform.LINUX_ARM : BrowserPlatform.LINUX;\n    case 'win32':\n      return arch === 'x64' ||\n      // Windows 11 for ARM supports x64 emulation\n      arch === 'arm64' && isWindows11(os.release()) ? BrowserPlatform.WIN64 : BrowserPlatform.WIN32;\n    default:\n      return undefined;\n  }\n}\n/**\n * Windows 11 is identified by the version 10.0.22000 or greater\n * @internal\n */\nfunction isWindows11(version) {\n  const parts = version.split('.');\n  if (parts.length > 2) {\n    const major = parseInt(parts[0], 10);\n    const minor = parseInt(parts[1], 10);\n    const patch = parseInt(parts[2], 10);\n    return major > 10 || major === 10 && minor > 0 || major === 10 && minor === 0 && patch >= 22000;\n  }\n  return false;\n}","map":{"version":3,"names":["os","BrowserPlatform","detectBrowserPlatform","platform","arch","MAC_ARM","MAC","LINUX_ARM","LINUX","isWindows11","release","WIN64","WIN32","undefined","version","parts","split","length","major","parseInt","minor","patch"],"sources":["/Users/goyac1/Desktop/Projects/puppeteer/node_modules/@puppeteer/browsers/src/detectPlatform.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport os from 'node:os';\n\nimport {BrowserPlatform} from './browser-data/browser-data.js';\n\n/**\n * @public\n */\nexport function detectBrowserPlatform(): BrowserPlatform | undefined {\n  const platform = os.platform();\n  const arch = os.arch();\n  switch (platform) {\n    case 'darwin':\n      return arch === 'arm64' ? BrowserPlatform.MAC_ARM : BrowserPlatform.MAC;\n    case 'linux':\n      return arch === 'arm64'\n        ? BrowserPlatform.LINUX_ARM\n        : BrowserPlatform.LINUX;\n    case 'win32':\n      return arch === 'x64' ||\n        // Windows 11 for ARM supports x64 emulation\n        (arch === 'arm64' && isWindows11(os.release()))\n        ? BrowserPlatform.WIN64\n        : BrowserPlatform.WIN32;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Windows 11 is identified by the version 10.0.22000 or greater\n * @internal\n */\nfunction isWindows11(version: string): boolean {\n  const parts = version.split('.');\n  if (parts.length > 2) {\n    const major = parseInt(parts[0] as string, 10);\n    const minor = parseInt(parts[1] as string, 10);\n    const patch = parseInt(parts[2] as string, 10);\n    return (\n      major > 10 ||\n      (major === 10 && minor > 0) ||\n      (major === 10 && minor === 0 && patch >= 22000)\n    );\n  }\n  return false;\n}\n"],"mappings":"AAAA;;;;;AAMA,OAAOA,EAAE,MAAM,SAAS;AAExB,SAAQC,eAAe,QAAO,gCAAgC;AAE9D;;;AAGA,OAAM,SAAUC,qBAAqBA,CAAA;EACnC,MAAMC,QAAQ,GAAGH,EAAE,CAACG,QAAQ,EAAE;EAC9B,MAAMC,IAAI,GAAGJ,EAAE,CAACI,IAAI,EAAE;EACtB,QAAQD,QAAQ;IACd,KAAK,QAAQ;MACX,OAAOC,IAAI,KAAK,OAAO,GAAGH,eAAe,CAACI,OAAO,GAAGJ,eAAe,CAACK,GAAG;IACzE,KAAK,OAAO;MACV,OAAOF,IAAI,KAAK,OAAO,GACnBH,eAAe,CAACM,SAAS,GACzBN,eAAe,CAACO,KAAK;IAC3B,KAAK,OAAO;MACV,OAAOJ,IAAI,KAAK,KAAK;MACnB;MACCA,IAAI,KAAK,OAAO,IAAIK,WAAW,CAACT,EAAE,CAACU,OAAO,EAAE,CAAE,GAC7CT,eAAe,CAACU,KAAK,GACrBV,eAAe,CAACW,KAAK;IAC3B;MACE,OAAOC,SAAS;EACpB;AACF;AAEA;;;;AAIA,SAASJ,WAAWA,CAACK,OAAe;EAClC,MAAMC,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;EAChC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IACpB,MAAMC,KAAK,GAAGC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC;IAC9C,MAAMK,KAAK,GAAGD,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC;IAC9C,MAAMM,KAAK,GAAGF,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC;IAC9C,OACEG,KAAK,GAAG,EAAE,IACTA,KAAK,KAAK,EAAE,IAAIE,KAAK,GAAG,CAAE,IAC1BF,KAAK,KAAK,EAAE,IAAIE,KAAK,KAAK,CAAC,IAAIC,KAAK,IAAI,KAAM;EAEnD;EACA,OAAO,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}