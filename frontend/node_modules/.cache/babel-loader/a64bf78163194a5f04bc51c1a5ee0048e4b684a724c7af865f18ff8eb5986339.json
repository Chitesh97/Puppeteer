{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CDPSession, CDPSessionEvent } from '../api/CDPSession.js';\nimport { CallbackRegistry } from '../common/CallbackRegistry.js';\nimport { TargetCloseError } from '../common/Errors.js';\nimport { assert } from '../util/assert.js';\nimport { createProtocolErrorMessage } from '../util/ErrorLike.js';\n/**\n * @internal\n */\nexport class CdpCDPSession extends CDPSession {\n  #sessionId;\n  #targetType;\n  #callbacks = new CallbackRegistry();\n  #connection;\n  #parentSessionId;\n  #target;\n  #rawErrors = false;\n  #detached = false;\n  /**\n   * @internal\n   */\n  constructor(connection, targetType, sessionId, parentSessionId, rawErrors) {\n    super();\n    this.#connection = connection;\n    this.#targetType = targetType;\n    this.#sessionId = sessionId;\n    this.#parentSessionId = parentSessionId;\n    this.#rawErrors = rawErrors;\n  }\n  /**\n   * Sets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  setTarget(target) {\n    this.#target = target;\n  }\n  /**\n   * Gets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  target() {\n    assert(this.#target, 'Target must exist');\n    return this.#target;\n  }\n  connection() {\n    return this.#connection;\n  }\n  get detached() {\n    return this.#connection._closed || this.#detached;\n  }\n  parentSession() {\n    if (!this.#parentSessionId) {\n      // In some cases, e.g., DevTools pages there is no parent session. In this\n      // case, we treat the current session as the parent session.\n      return this;\n    }\n    const parent = this.#connection?.session(this.#parentSessionId);\n    return parent ?? undefined;\n  }\n  send(method, params, options) {\n    if (this.detached) {\n      return Promise.reject(new TargetCloseError(`Protocol error (${method}): Session closed. Most likely the ${this.#targetType} has been closed.`));\n    }\n    return this.#connection._rawSend(this.#callbacks, method, params, this.#sessionId, options);\n  }\n  /**\n   * @internal\n   */\n  onMessage(object) {\n    if (object.id) {\n      if (object.error) {\n        if (this.#rawErrors) {\n          this.#callbacks.rejectRaw(object.id, object.error);\n        } else {\n          this.#callbacks.reject(object.id, createProtocolErrorMessage(object), object.error.message);\n        }\n      } else {\n        this.#callbacks.resolve(object.id, object.result);\n      }\n    } else {\n      assert(!object.id);\n      this.emit(object.method, object.params);\n    }\n  }\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n  async detach() {\n    if (this.detached) {\n      throw new Error(`Session already detached. Most likely the ${this.#targetType} has been closed.`);\n    }\n    await this.#connection.send('Target.detachFromTarget', {\n      sessionId: this.#sessionId\n    });\n    this.#detached = true;\n  }\n  /**\n   * @internal\n   */\n  onClosed() {\n    this.#callbacks.clear();\n    this.#detached = true;\n    this.emit(CDPSessionEvent.Disconnected, undefined);\n  }\n  /**\n   * Returns the session's id.\n   */\n  id() {\n    return this.#sessionId;\n  }\n  /**\n   * @internal\n   */\n  getPendingProtocolErrors() {\n    return this.#callbacks.getPendingProtocolErrors();\n  }\n}","map":{"version":3,"names":["CDPSession","CDPSessionEvent","CallbackRegistry","TargetCloseError","assert","createProtocolErrorMessage","CdpCDPSession","sessionId","targetType","callbacks","connection","parentSessionId","target","rawErrors","detached","constructor","setTarget","_closed","parentSession","parent","session","undefined","send","method","params","options","Promise","reject","_rawSend","onMessage","object","id","error","rejectRaw","message","resolve","result","emit","detach","Error","onClosed","clear","Disconnected","getPendingProtocolErrors"],"sources":["/Users/goyac1/Desktop/Projects/puppeteer/node_modules/puppeteer-core/src/cdp/CdpSession.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {ProtocolMapping} from 'devtools-protocol/types/protocol-mapping.js';\n\nimport {\n  type CDPEvents,\n  CDPSession,\n  CDPSessionEvent,\n  type CommandOptions,\n} from '../api/CDPSession.js';\nimport {CallbackRegistry} from '../common/CallbackRegistry.js';\nimport {TargetCloseError} from '../common/Errors.js';\nimport {assert} from '../util/assert.js';\nimport {createProtocolErrorMessage} from '../util/ErrorLike.js';\n\nimport type {Connection} from './Connection.js';\nimport type {CdpTarget} from './Target.js';\n\n/**\n * @internal\n */\n\nexport class CdpCDPSession extends CDPSession {\n  #sessionId: string;\n  #targetType: string;\n  #callbacks = new CallbackRegistry();\n  #connection: Connection;\n  #parentSessionId?: string;\n  #target?: CdpTarget;\n  #rawErrors = false;\n  #detached = false;\n  /**\n   * @internal\n   */\n  constructor(\n    connection: Connection,\n    targetType: string,\n    sessionId: string,\n    parentSessionId: string | undefined,\n    rawErrors: boolean,\n  ) {\n    super();\n    this.#connection = connection;\n    this.#targetType = targetType;\n    this.#sessionId = sessionId;\n    this.#parentSessionId = parentSessionId;\n    this.#rawErrors = rawErrors;\n  }\n\n  /**\n   * Sets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  setTarget(target: CdpTarget): void {\n    this.#target = target;\n  }\n\n  /**\n   * Gets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  target(): CdpTarget {\n    assert(this.#target, 'Target must exist');\n    return this.#target;\n  }\n\n  override connection(): Connection | undefined {\n    return this.#connection;\n  }\n\n  override get detached(): boolean {\n    return this.#connection._closed || this.#detached;\n  }\n\n  override parentSession(): CDPSession | undefined {\n    if (!this.#parentSessionId) {\n      // In some cases, e.g., DevTools pages there is no parent session. In this\n      // case, we treat the current session as the parent session.\n      return this;\n    }\n    const parent = this.#connection?.session(this.#parentSessionId);\n    return parent ?? undefined;\n  }\n\n  override send<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    params?: ProtocolMapping.Commands[T]['paramsType'][0],\n    options?: CommandOptions,\n  ): Promise<ProtocolMapping.Commands[T]['returnType']> {\n    if (this.detached) {\n      return Promise.reject(\n        new TargetCloseError(\n          `Protocol error (${method}): Session closed. Most likely the ${this.#targetType} has been closed.`,\n        ),\n      );\n    }\n    return this.#connection._rawSend(\n      this.#callbacks,\n      method,\n      params,\n      this.#sessionId,\n      options,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  onMessage(object: {\n    id?: number;\n    method: keyof CDPEvents;\n    params: CDPEvents[keyof CDPEvents];\n    error: {message: string; data: any; code: number};\n    result?: any;\n  }): void {\n    if (object.id) {\n      if (object.error) {\n        if (this.#rawErrors) {\n          this.#callbacks.rejectRaw(object.id, object.error);\n        } else {\n          this.#callbacks.reject(\n            object.id,\n            createProtocolErrorMessage(object),\n            object.error.message,\n          );\n        }\n      } else {\n        this.#callbacks.resolve(object.id, object.result);\n      }\n    } else {\n      assert(!object.id);\n      this.emit(object.method, object.params);\n    }\n  }\n\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n  override async detach(): Promise<void> {\n    if (this.detached) {\n      throw new Error(\n        `Session already detached. Most likely the ${this.#targetType} has been closed.`,\n      );\n    }\n    await this.#connection.send('Target.detachFromTarget', {\n      sessionId: this.#sessionId,\n    });\n    this.#detached = true;\n  }\n\n  /**\n   * @internal\n   */\n  onClosed(): void {\n    this.#callbacks.clear();\n    this.#detached = true;\n    this.emit(CDPSessionEvent.Disconnected, undefined);\n  }\n\n  /**\n   * Returns the session's id.\n   */\n  override id(): string {\n    return this.#sessionId;\n  }\n\n  /**\n   * @internal\n   */\n  getPendingProtocolErrors(): Error[] {\n    return this.#callbacks.getPendingProtocolErrors();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}