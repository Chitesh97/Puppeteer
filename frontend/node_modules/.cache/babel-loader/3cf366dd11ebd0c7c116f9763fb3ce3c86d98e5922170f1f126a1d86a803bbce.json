{"ast":null,"code":"import { HTTPResponse } from '../api/HTTPResponse.js';\nimport { ProtocolError } from '../common/Errors.js';\nimport { SecurityDetails } from '../common/SecurityDetails.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { stringToTypedArray } from '../util/encoding.js';\n/**\n * @internal\n */\nexport class CdpHTTPResponse extends HTTPResponse {\n  #request;\n  #contentPromise = null;\n  #bodyLoadedDeferred = Deferred.create();\n  #remoteAddress;\n  #status;\n  #statusText;\n  #fromDiskCache;\n  #fromServiceWorker;\n  #headers = {};\n  #securityDetails;\n  #timing;\n  constructor(request, responsePayload, extraInfo) {\n    super();\n    this.#request = request;\n    this.#remoteAddress = {\n      ip: responsePayload.remoteIPAddress,\n      port: responsePayload.remotePort\n    };\n    this.#statusText = this.#parseStatusTextFromExtraInfo(extraInfo) || responsePayload.statusText;\n    this.#fromDiskCache = !!responsePayload.fromDiskCache;\n    this.#fromServiceWorker = !!responsePayload.fromServiceWorker;\n    this.#status = extraInfo ? extraInfo.statusCode : responsePayload.status;\n    const headers = extraInfo ? extraInfo.headers : responsePayload.headers;\n    for (const [key, value] of Object.entries(headers)) {\n      this.#headers[key.toLowerCase()] = value;\n    }\n    this.#securityDetails = responsePayload.securityDetails ? new SecurityDetails(responsePayload.securityDetails) : null;\n    this.#timing = responsePayload.timing || null;\n  }\n  #parseStatusTextFromExtraInfo(extraInfo) {\n    if (!extraInfo || !extraInfo.headersText) {\n      return;\n    }\n    const firstLine = extraInfo.headersText.split('\\r', 1)[0];\n    if (!firstLine || firstLine.length > 1_000) {\n      return;\n    }\n    const match = firstLine.match(/[^ ]* [^ ]* (.*)/);\n    if (!match) {\n      return;\n    }\n    const statusText = match[1];\n    if (!statusText) {\n      return;\n    }\n    return statusText;\n  }\n  _resolveBody(err) {\n    if (err) {\n      return this.#bodyLoadedDeferred.reject(err);\n    }\n    return this.#bodyLoadedDeferred.resolve();\n  }\n  remoteAddress() {\n    return this.#remoteAddress;\n  }\n  url() {\n    return this.#request.url();\n  }\n  status() {\n    return this.#status;\n  }\n  statusText() {\n    return this.#statusText;\n  }\n  headers() {\n    return this.#headers;\n  }\n  securityDetails() {\n    return this.#securityDetails;\n  }\n  timing() {\n    return this.#timing;\n  }\n  content() {\n    if (!this.#contentPromise) {\n      this.#contentPromise = this.#bodyLoadedDeferred.valueOrThrow().then(async () => {\n        try {\n          // Use CDPSession from corresponding request to retrieve body, as it's client\n          // might have been updated (e.g. for an adopted OOPIF).\n          const response = await this.#request.client.send('Network.getResponseBody', {\n            requestId: this.#request.id\n          });\n          return stringToTypedArray(response.body, response.base64Encoded);\n        } catch (error) {\n          if (error instanceof ProtocolError && error.originalMessage === 'No resource with given identifier found') {\n            throw new ProtocolError('Could not load body for this request. This might happen if the request is a preflight request.');\n          }\n          throw error;\n        }\n      });\n    }\n    return this.#contentPromise;\n  }\n  request() {\n    return this.#request;\n  }\n  fromCache() {\n    return this.#fromDiskCache || this.#request._fromMemoryCache;\n  }\n  fromServiceWorker() {\n    return this.#fromServiceWorker;\n  }\n  frame() {\n    return this.#request.frame();\n  }\n}","map":{"version":3,"names":["HTTPResponse","ProtocolError","SecurityDetails","Deferred","stringToTypedArray","CdpHTTPResponse","request","contentPromise","bodyLoadedDeferred","create","remoteAddress","status","statusText","fromDiskCache","fromServiceWorker","headers","securityDetails","timing","constructor","responsePayload","extraInfo","ip","remoteIPAddress","port","remotePort","parseStatusTextFromExtraInfo","statusCode","key","value","Object","entries","toLowerCase","#parseStatusTextFromExtraInfo","headersText","firstLine","split","length","match","_resolveBody","err","reject","resolve","url","content","valueOrThrow","then","response","client","send","requestId","id","body","base64Encoded","error","originalMessage","fromCache","_fromMemoryCache","frame"],"sources":["/Users/goyac1/Desktop/Projects/puppeteer/node_modules/puppeteer-core/src/cdp/HTTPResponse.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {Frame} from '../api/Frame.js';\nimport {HTTPResponse, type RemoteAddress} from '../api/HTTPResponse.js';\nimport {ProtocolError} from '../common/Errors.js';\nimport {SecurityDetails} from '../common/SecurityDetails.js';\nimport {Deferred} from '../util/Deferred.js';\nimport {stringToTypedArray} from '../util/encoding.js';\n\nimport type {CdpHTTPRequest} from './HTTPRequest.js';\n\n/**\n * @internal\n */\nexport class CdpHTTPResponse extends HTTPResponse {\n  #request: CdpHTTPRequest;\n  #contentPromise: Promise<Uint8Array> | null = null;\n  #bodyLoadedDeferred = Deferred.create<void, Error>();\n  #remoteAddress: RemoteAddress;\n  #status: number;\n  #statusText: string;\n  #fromDiskCache: boolean;\n  #fromServiceWorker: boolean;\n  #headers: Record<string, string> = {};\n  #securityDetails: SecurityDetails | null;\n  #timing: Protocol.Network.ResourceTiming | null;\n\n  constructor(\n    request: CdpHTTPRequest,\n    responsePayload: Protocol.Network.Response,\n    extraInfo: Protocol.Network.ResponseReceivedExtraInfoEvent | null,\n  ) {\n    super();\n    this.#request = request;\n\n    this.#remoteAddress = {\n      ip: responsePayload.remoteIPAddress,\n      port: responsePayload.remotePort,\n    };\n    this.#statusText =\n      this.#parseStatusTextFromExtraInfo(extraInfo) ||\n      responsePayload.statusText;\n    this.#fromDiskCache = !!responsePayload.fromDiskCache;\n    this.#fromServiceWorker = !!responsePayload.fromServiceWorker;\n\n    this.#status = extraInfo ? extraInfo.statusCode : responsePayload.status;\n    const headers = extraInfo ? extraInfo.headers : responsePayload.headers;\n    for (const [key, value] of Object.entries(headers)) {\n      this.#headers[key.toLowerCase()] = value;\n    }\n\n    this.#securityDetails = responsePayload.securityDetails\n      ? new SecurityDetails(responsePayload.securityDetails)\n      : null;\n    this.#timing = responsePayload.timing || null;\n  }\n\n  #parseStatusTextFromExtraInfo(\n    extraInfo: Protocol.Network.ResponseReceivedExtraInfoEvent | null,\n  ): string | undefined {\n    if (!extraInfo || !extraInfo.headersText) {\n      return;\n    }\n    const firstLine = extraInfo.headersText.split('\\r', 1)[0];\n    if (!firstLine || firstLine.length > 1_000) {\n      return;\n    }\n    const match = firstLine.match(/[^ ]* [^ ]* (.*)/);\n    if (!match) {\n      return;\n    }\n    const statusText = match[1];\n    if (!statusText) {\n      return;\n    }\n    return statusText;\n  }\n\n  _resolveBody(err?: Error): void {\n    if (err) {\n      return this.#bodyLoadedDeferred.reject(err);\n    }\n    return this.#bodyLoadedDeferred.resolve();\n  }\n\n  override remoteAddress(): RemoteAddress {\n    return this.#remoteAddress;\n  }\n\n  override url(): string {\n    return this.#request.url();\n  }\n\n  override status(): number {\n    return this.#status;\n  }\n\n  override statusText(): string {\n    return this.#statusText;\n  }\n\n  override headers(): Record<string, string> {\n    return this.#headers;\n  }\n\n  override securityDetails(): SecurityDetails | null {\n    return this.#securityDetails;\n  }\n\n  override timing(): Protocol.Network.ResourceTiming | null {\n    return this.#timing;\n  }\n\n  override content(): Promise<Uint8Array> {\n    if (!this.#contentPromise) {\n      this.#contentPromise = this.#bodyLoadedDeferred\n        .valueOrThrow()\n        .then(async () => {\n          try {\n            // Use CDPSession from corresponding request to retrieve body, as it's client\n            // might have been updated (e.g. for an adopted OOPIF).\n            const response = await this.#request.client.send(\n              'Network.getResponseBody',\n              {\n                requestId: this.#request.id,\n              },\n            );\n\n            return stringToTypedArray(response.body, response.base64Encoded);\n          } catch (error) {\n            if (\n              error instanceof ProtocolError &&\n              error.originalMessage ===\n                'No resource with given identifier found'\n            ) {\n              throw new ProtocolError(\n                'Could not load body for this request. This might happen if the request is a preflight request.',\n              );\n            }\n\n            throw error;\n          }\n        });\n    }\n    return this.#contentPromise;\n  }\n\n  override request(): CdpHTTPRequest {\n    return this.#request;\n  }\n\n  override fromCache(): boolean {\n    return this.#fromDiskCache || this.#request._fromMemoryCache;\n  }\n\n  override fromServiceWorker(): boolean {\n    return this.#fromServiceWorker;\n  }\n\n  override frame(): Frame | null {\n    return this.#request.frame();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}