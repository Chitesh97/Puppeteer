{"ast":null,"code":"/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @internal\n */\nexport function stringToTypedArray(string, base64Encoded = false) {\n  if (base64Encoded) {\n    // TODO: use\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/fromBase64\n    // once available.\n    if (typeof Buffer === 'function') {\n      return Buffer.from(string, 'base64');\n    }\n    return Uint8Array.from(atob(string), m => {\n      return m.codePointAt(0);\n    });\n  }\n  return new TextEncoder().encode(string);\n}\n/**\n * @internal\n */\nexport function stringToBase64(str) {\n  return typedArrayToBase64(new TextEncoder().encode(str));\n}\n/**\n * @internal\n */\nexport function typedArrayToBase64(typedArray) {\n  // chunkSize should be less V8 limit on number of arguments!\n  // https://github.com/v8/v8/blob/d3de848bea727518aee94dd2fd42ba0b62037a27/src/objects/code.h#L444\n  const chunkSize = 65534;\n  const chunks = [];\n  for (let i = 0; i < typedArray.length; i += chunkSize) {\n    const chunk = typedArray.subarray(i, i + chunkSize);\n    chunks.push(String.fromCodePoint.apply(null, chunk));\n  }\n  const binaryString = chunks.join('');\n  return btoa(binaryString);\n}\n/**\n * @internal\n */\nexport function mergeUint8Arrays(items) {\n  let length = 0;\n  for (const item of items) {\n    length += item.length;\n  }\n  // Create a new array with total length and merge all source arrays.\n  const result = new Uint8Array(length);\n  let offset = 0;\n  for (const item of items) {\n    result.set(item, offset);\n    offset += item.length;\n  }\n  return result;\n}","map":{"version":3,"names":["stringToTypedArray","string","base64Encoded","Buffer","from","Uint8Array","atob","m","codePointAt","TextEncoder","encode","stringToBase64","str","typedArrayToBase64","typedArray","chunkSize","chunks","i","length","chunk","subarray","push","String","fromCodePoint","apply","binaryString","join","btoa","mergeUint8Arrays","items","item","result","offset","set"],"sources":["/Users/goyac1/Desktop/Projects/puppeteer/node_modules/puppeteer-core/src/util/encoding.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @internal\n */\nexport function stringToTypedArray(\n  string: string,\n  base64Encoded = false,\n): Uint8Array {\n  if (base64Encoded) {\n    // TODO: use\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/fromBase64\n    // once available.\n    if (typeof Buffer === 'function') {\n      return Buffer.from(string, 'base64');\n    }\n    return Uint8Array.from(atob(string), m => {\n      return m.codePointAt(0)!;\n    });\n  }\n  return new TextEncoder().encode(string);\n}\n\n/**\n * @internal\n */\nexport function stringToBase64(str: string): string {\n  return typedArrayToBase64(new TextEncoder().encode(str));\n}\n\n/**\n * @internal\n */\nexport function typedArrayToBase64(typedArray: Uint8Array): string {\n  // chunkSize should be less V8 limit on number of arguments!\n  // https://github.com/v8/v8/blob/d3de848bea727518aee94dd2fd42ba0b62037a27/src/objects/code.h#L444\n  const chunkSize = 65534;\n  const chunks = [];\n\n  for (let i = 0; i < typedArray.length; i += chunkSize) {\n    const chunk = typedArray.subarray(i, i + chunkSize);\n    chunks.push(String.fromCodePoint.apply(null, chunk as unknown as number[]));\n  }\n\n  const binaryString = chunks.join('');\n  return btoa(binaryString);\n}\n\n/**\n * @internal\n */\nexport function mergeUint8Arrays(items: Uint8Array[]): Uint8Array {\n  let length = 0;\n  for (const item of items) {\n    length += item.length;\n  }\n\n  // Create a new array with total length and merge all source arrays.\n  const result = new Uint8Array(length);\n  let offset = 0;\n  for (const item of items) {\n    result.set(item, offset);\n    offset += item.length;\n  }\n\n  return result;\n}\n"],"mappings":"AAAA;;;;;AAMA;;;AAGA,OAAM,SAAUA,kBAAkBA,CAChCC,MAAc,EACdC,aAAa,GAAG,KAAK;EAErB,IAAIA,aAAa,EAAE;IACjB;IACA;IACA;IACA,IAAI,OAAOC,MAAM,KAAK,UAAU,EAAE;MAChC,OAAOA,MAAM,CAACC,IAAI,CAACH,MAAM,EAAE,QAAQ,CAAC;IACtC;IACA,OAAOI,UAAU,CAACD,IAAI,CAACE,IAAI,CAACL,MAAM,CAAC,EAAEM,CAAC,IAAG;MACvC,OAAOA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAE;IAC1B,CAAC,CAAC;EACJ;EACA,OAAO,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACT,MAAM,CAAC;AACzC;AAEA;;;AAGA,OAAM,SAAUU,cAAcA,CAACC,GAAW;EACxC,OAAOC,kBAAkB,CAAC,IAAIJ,WAAW,EAAE,CAACC,MAAM,CAACE,GAAG,CAAC,CAAC;AAC1D;AAEA;;;AAGA,OAAM,SAAUC,kBAAkBA,CAACC,UAAsB;EACvD;EACA;EACA,MAAMC,SAAS,GAAG,KAAK;EACvB,MAAMC,MAAM,GAAG,EAAE;EAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,CAACI,MAAM,EAAED,CAAC,IAAIF,SAAS,EAAE;IACrD,MAAMI,KAAK,GAAGL,UAAU,CAACM,QAAQ,CAACH,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAAC;IACnDC,MAAM,CAACK,IAAI,CAACC,MAAM,CAACC,aAAa,CAACC,KAAK,CAAC,IAAI,EAAEL,KAA4B,CAAC,CAAC;EAC7E;EAEA,MAAMM,YAAY,GAAGT,MAAM,CAACU,IAAI,CAAC,EAAE,CAAC;EACpC,OAAOC,IAAI,CAACF,YAAY,CAAC;AAC3B;AAEA;;;AAGA,OAAM,SAAUG,gBAAgBA,CAACC,KAAmB;EAClD,IAAIX,MAAM,GAAG,CAAC;EACd,KAAK,MAAMY,IAAI,IAAID,KAAK,EAAE;IACxBX,MAAM,IAAIY,IAAI,CAACZ,MAAM;EACvB;EAEA;EACA,MAAMa,MAAM,GAAG,IAAI1B,UAAU,CAACa,MAAM,CAAC;EACrC,IAAIc,MAAM,GAAG,CAAC;EACd,KAAK,MAAMF,IAAI,IAAID,KAAK,EAAE;IACxBE,MAAM,CAACE,GAAG,CAACH,IAAI,EAAEE,MAAM,CAAC;IACxBA,MAAM,IAAIF,IAAI,CAACZ,MAAM;EACvB;EAEA,OAAOa,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}