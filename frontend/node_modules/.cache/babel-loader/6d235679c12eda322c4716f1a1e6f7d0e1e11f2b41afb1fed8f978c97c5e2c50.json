{"ast":null,"code":"var _jsxFileName = \"/Users/goyac1/Desktop/Projects/puppeteer/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [urls, setUrls] = useState(\"https://www.google.com, https://www.github.com\");\n  const [screenshots, setScreenshots] = useState(null);\n  const takeScreenshots = async () => {\n    try {\n      const res = await fetch(\"http://localhost:5000/screenshots\", {\n        method: \"POST\",\n        \"headers\": {\n          \"Content-Type\": \"application/JSON\"\n        },\n        \"body\": JSON.stringify({\n          urls: urls.split(\",\").map(u => u.trim())\n        })\n      });\n      console.log(res);\n      if (!res.ok) {\n        throw new Error(\"Failed to take screenshot\");\n      }\n      const data = await res.json();\n      setScreenshots(data.screenshots);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to fetch screenshot\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Puppeteer example \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: 8,\n      cols: 10,\n      value: urls,\n      onChange: e => setUrls(e.target.value),\n      placeholder: \"Enter comma separated values\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: takeScreenshots,\n      children: \"Take Screenshot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" The screenshot once taken will be added below : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), screenshots && screenshots.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        borderBottom: \"1px solid\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [index, \" - \", item.url]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: item.screenshot,\n        alt: `Screenshot of ${item.url}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LNxgjSEksjmtnlp8LoJaX6+9QHQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","jsxDEV","_jsxDEV","App","_s","urls","setUrls","screenshots","setScreenshots","takeScreenshots","res","fetch","method","JSON","stringify","split","map","u","trim","console","log","ok","Error","data","json","err","error","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","cols","value","onChange","e","target","placeholder","onClick","item","index","style","borderBottom","url","src","screenshot","alt","_c","$RefreshReg$"],"sources":["/Users/goyac1/Desktop/Projects/puppeteer/frontend/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const [urls, setUrls] = useState(\"https://www.google.com, https://www.github.com\");\n  const [screenshots, setScreenshots] = useState(null);\n\n  const takeScreenshots = async () => {\n    try {\n      const res = await fetch(\"http://localhost:5000/screenshots\", {\n        method: \"POST\",\n        \"headers\": {\"Content-Type\": \"application/JSON\"},\n        \"body\": JSON.stringify({\n            urls: urls.split(\",\").map( u => u.trim() )\n          })\n        });\n      console.log(res);\n\n      if (!res.ok) {\n        throw new Error(\"Failed to take screenshot\");\n      }\n\n      const data = await res.json();\n      setScreenshots(data.screenshots);\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to fetch screenshot\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1> Puppeteer example </h1>\n      <textarea\n      rows={8}\n      cols={10}\n      value={urls}\n      onChange={ (e) => setUrls(e.target.value) }\n      placeholder=\"Enter comma separated values\"\n      />\n      <button onClick={takeScreenshots}>Take Screenshot</button>\n      <h2> The screenshot once taken will be added below : </h2>\n      { screenshots && screenshots.map((item, index) => (\n        <div key={index} style={{ borderBottom: \"1px solid\" }}>\n          <h3>{index} - {item.url}</h3>\n          <img src={item.screenshot} alt={`Screenshot of ${item.url}`} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}