{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.file = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs_1 = require(\"fs\");\nconst notfound_1 = __importDefault(require(\"./notfound\"));\nconst notmodified_1 = __importDefault(require(\"./notmodified\"));\nconst url_1 = require(\"url\");\nconst debug = (0, debug_1.default)('get-uri:file');\n/**\n * Returns a `fs.ReadStream` instance from a \"file:\" URI.\n */\nconst file = async ({\n  href: uri\n}, opts = {}) => {\n  const {\n    cache,\n    flags = 'r',\n    mode = 438 // =0666\n  } = opts;\n  try {\n    // Convert URI â†’ Path\n    const filepath = (0, url_1.fileURLToPath)(uri);\n    debug('Normalized pathname: %o', filepath);\n    // `open()` first to get a file descriptor and ensure that the file\n    // exists.\n    const fdHandle = await fs_1.promises.open(filepath, flags, mode);\n    // extract the numeric file descriptor\n    const fd = fdHandle.fd;\n    // store the stat object for the cache.\n    const stat = await fdHandle.stat();\n    // if a `cache` was provided, check if the file has not been modified\n    if (cache && cache.stat && stat && isNotModified(cache.stat, stat)) {\n      await fdHandle.close();\n      throw new notmodified_1.default();\n    }\n    // `fs.ReadStream` takes care of calling `fs.close()` on the\n    // fd after it's done reading\n    const rs = (0, fs_1.createReadStream)(filepath, {\n      autoClose: true,\n      ...opts,\n      fd\n    });\n    rs.stat = stat;\n    return rs;\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      throw new notfound_1.default();\n    }\n    throw err;\n  }\n};\nexports.file = file;\n// returns `true` if the `mtime` of the 2 stat objects are equal\nfunction isNotModified(prev, curr) {\n  return +prev.mtime === +curr.mtime;\n}","map":{"version":3,"names":["debug_1","__importDefault","require","fs_1","notfound_1","notmodified_1","url_1","debug","default","file","href","uri","opts","cache","flags","mode","filepath","fileURLToPath","fdHandle","promises","open","fd","stat","isNotModified","close","rs","createReadStream","autoClose","err","code","exports","prev","curr","mtime"],"sources":["../src/file.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,IAAA,GAAAD,OAAA;AAEA,MAAAE,UAAA,GAAAH,eAAA,CAAAC,OAAA;AACA,MAAAG,aAAA,GAAAJ,eAAA,CAAAC,OAAA;AACA,MAAAI,KAAA,GAAAJ,OAAA;AAEA,MAAMK,KAAK,GAAG,IAAAP,OAAA,CAAAQ,OAAW,EAAC,cAAc,CAAC;AAczC;;;AAIO,MAAMC,IAAI,GAAgC,MAAAA,CAChD;EAAEC,IAAI,EAAEC;AAAG,CAAE,EACbC,IAAI,GAAG,EAAE,KACN;EACH,MAAM;IACLC,KAAK;IACLC,KAAK,GAAG,GAAG;IACXC,IAAI,GAAG,GAAG,CAAE;GACZ,GAAGH,IAAI;EAER,IAAI;IACH;IACA,MAAMI,QAAQ,GAAG,IAAAV,KAAA,CAAAW,aAAa,EAACN,GAAG,CAAC;IACnCJ,KAAK,CAAC,yBAAyB,EAAES,QAAQ,CAAC;IAE1C;IACA;IACA,MAAME,QAAQ,GAAG,MAAMf,IAAA,CAAAgB,QAAU,CAACC,IAAI,CAACJ,QAAQ,EAAEF,KAAK,EAAEC,IAAI,CAAC;IAC7D;IACA,MAAMM,EAAE,GAAGH,QAAQ,CAACG,EAAE;IAEtB;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,EAAE;IAElC;IACA,IAAIT,KAAK,IAAIA,KAAK,CAACS,IAAI,IAAIA,IAAI,IAAIC,aAAa,CAACV,KAAK,CAACS,IAAI,EAAEA,IAAI,CAAC,EAAE;MACnE,MAAMJ,QAAQ,CAACM,KAAK,EAAE;MACtB,MAAM,IAAInB,aAAA,CAAAG,OAAgB,EAAE;;IAG7B;IACA;IACA,MAAMiB,EAAE,GAAG,IAAAtB,IAAA,CAAAuB,gBAAgB,EAACV,QAAQ,EAAE;MACrCW,SAAS,EAAE,IAAI;MACf,GAAGf,IAAI;MACPS;KACA,CAAiB;IAClBI,EAAE,CAACH,IAAI,GAAGA,IAAI;IACd,OAAOG,EAAE;GACT,CAAC,OAAOG,GAAY,EAAE;IACtB,IAAKA,GAA6B,CAACC,IAAI,KAAK,QAAQ,EAAE;MACrD,MAAM,IAAIzB,UAAA,CAAAI,OAAa,EAAE;;IAE1B,MAAMoB,GAAG;;AAEX,CAAC;AA7CYE,OAAA,CAAArB,IAAI,GAAAA,IAAA;AA+CjB;AACA,SAASc,aAAaA,CAACQ,IAAW,EAAEC,IAAW;EAC9C,OAAO,CAACD,IAAI,CAACE,KAAK,KAAK,CAACD,IAAI,CAACC,KAAK;AACnC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}